name: publishArtifacts

on:
  workflow_call:
    inputs:
      skipTests:
        description: "Skip extended testing (unit and other tests), only build artifacts"
        type: boolean
        required: false
        default: false
      component:
        type: string
        required: false
      profile:
        type: string
        required: false

defaults:
  run:
    shell: bash -l -ET -eo pipefail {0}

jobs:
  init:
    runs-on: [ "self-hosted", "builder" ]
    outputs:
      metadata: ${{ steps.init.outputs.metadata }}
      skip-tests: ${{ steps.init.outputs.skip-tests }}
      parameters: ${{ steps.init.outputs.parameters }}
    steps:
      - id: init
        name: Init Workflow
        uses: hawk-ai-aml/github-actions/workflow-init@master
        with:
          slack-notification-webhook: ${{ secrets.CICD_MIGRATION_SLACK_WEBHOOK_URL }}
          profile: ${{ inputs.profile }}
          component: ${{ inputs.component }}
          update-kustomize: false
          skip-tests: ${{ inputs.skipTests }}

  build:
    needs: [ init ]
    runs-on: [ "self-hosted", "builder" ]
    steps:
      - id: init
        name: Init Job
        uses: hawk-ai-aml/github-actions/job-init@master
        with:
          slack-notification-webhook: ${{ secrets.CICD_MIGRATION_SLACK_WEBHOOK_URL }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ fromJson(needs.init.outputs.parameters).java-version }}
          distribution: temurin
          cache: gradle

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        env:
          GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true

      - name: Gradle Assemble
        env: 
          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: ./gradlew clean assemble testClasses -isS

      - name: License Report
        env: 
          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: ./gradlew licenseReport

      - name: Check Quality
        env: 
          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: ./gradlew checkQualityMain

      - name: Run Tests
        if: ${{ needs.init.outputs.skip-tests != 'true' }}
        env: 
          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: ./gradlew test -isS

      - name: Publish artifacts to Artifactory
        env: 
          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_DEPLOY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_DEPLOY_PASSWORD }}
        run: ./gradlew :core:artifactoryPublish :client:artifactoryPublish

      - name: Aggregate reports for upload
        if: needs.init.outputs.skip-tests != 'true' && (success() || failure())
        run: |
          mkdir -p reports/{core,client}/build
          cp -r core/build/reports reports/core/build/reports
          cp -r client/build/reports reports/client/build/reports

      - name: Upload Reports to S3
        id: reports
        if: needs.init.outputs.skip-tests != 'true' && (success() || failure())
        uses: hawk-ai-aml/upload-s3-action@master
        with:
          aws_key_id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          aws_bucket: github-actions-static-html-2
          source_dir: reports
          destination_dir: ${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Provide Links to Reports
        if: needs.init.outputs.skip-tests != 'true' && (success() || failure())
        run: |
          echo "### Test Reports" | tee -a ${GITHUB_STEP_SUMMARY}
          report_url=https://github-actions-static-html-2.s3.amazonaws.com/${{ github.event.repository.name }}-${{ github.run_id }}/
          for report_file_loc in ${{ join(fromJSON(steps.reports.outputs.object_locations), ' ') }}; do
            report_basename=${report_file_loc##${report_url}}
            if [[ ${report_file_loc} == */main.html || ${report_file_loc} == */index.html || ${report_file_loc} == */licenseReport.html ]]; then
              echo "* [${report_basename}](${report_file_loc})" | tee -a ${GITHUB_STEP_SUMMARY}
            fi
          done
