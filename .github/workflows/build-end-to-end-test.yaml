name: end-to-end-tests
on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: Environment
        required: true
      test:
        type: string
        description: Test module
        required: true
      ref:
        type: string
        description: Tag or branch name
        required: true
      metadata:
        description: The metadata for the test
        type: string
        required: false

defaults:
  run:
    shell: bash -l -ET -eo pipefail {0}

jobs:
  test:
    runs-on: [ "self-hosted", "tester" ]

    outputs:
      url: ${{ steps.report-url.outputs.url }}
      test_status: ${{ steps.status.outputs.test_status }}

    steps:
      - name: Display test tools versions
        run: |
          printf "### wget: $(wget --version)\n"
          printf "### node: $(node --version) / npm: $(npm --version) / jq: $(jq --version)\n"
          printf "### curl: $(curl --version)\n"
          printf "### java: $(java --version) [$(which java)]\n"
          printf "### java-link: $(readlink -f $(which java))\n"
          printf "### chrome-driver: $(chromedriver --version) / [$(which chromedriver)]\n"
          printf "### chrome-browser: $(google-chrome --version) / [$(which google-chrome)]\n"
          printf "### allure: $(allure --version)\n"

      - name: Cleanup old checkout
        run: chmod +w -R ${GITHUB_WORKSPACE}; rm -rf ${GITHUB_WORKSPACE}/*;

      - name: Checkout
        run: |
          echo "Checkout ref: ${{ inputs.ref }}"

      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      # +++++++++++++++++++++++++++++++++++++ START-SETUP +++++++++++++++++++++++++++++++++++++
      - name: Generate cache ID
        run: |
          echo CACHE_ID=$(date +'%Y-%m-%dT%H:%M:%S') >> $GITHUB_ENV
          echo CACHE_PATH="$GITHUB_WORKSPACE/${{ inputs.environment }}-${{ inputs.test }}-test-histories/" >> $GITHUB_ENV

      - name: Create cache folder
        continue-on-error: true
        run: |
          pwd
          mkdir ${{ inputs.environment }}-${{ inputs.test }}-test-histories
          echo "init at - $(date +'%Y-%m-%dT%H:%M:%S')" >> ${{ inputs.environment }}-${{ inputs.test }}-test-histories/init-cache.txt

      - name: Caching test history
        id: cache-test-history
        if: always()
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ runner.os }}-${{ inputs.environment }}-${{ inputs.test }}-test-histories-${{ env.CACHE_ID }}
          restore-keys: |
            ${{ runner.os }}-${{ inputs.environment }}-${{ inputs.test }}-test-histories-

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: /home/builder/.gradle/
          key: ${{ runner.os }}-gradle-
          restore-keys: |
            ${{ runner.os }}-gradle-

      # ------------------------------------- END-SETUP --------------------------------------
      # +++++++++++++++++++++++++++++++++++++ START-TEST +++++++++++++++++++++++++++++++++++++
      - name: Build <${{ inputs.test }}> tests
        if: always()
        env:
          environment: ${{ inputs.environment }}
        run: |
          ./gradlew :${{ inputs.test }}:clean :${{ inputs.test }}:assemble :${{ inputs.test }}:testClasses -isS

      - name: Run <${{ inputs.test }} tests on ${{ inputs.environment }}>
        id: run-e2e-test
        if: always()
        env:
          TEST_MAILBOX_PASSWORD: ${{ secrets.AUTH0_DEV_API_CLIENT_SECRET }}
          AUTH0_DEV_API_CLIENT_SECRET: ${{ secrets.AUTH0_DEV_API_CLIENT_SECRET }}
          AUTH0_PROD_API_CLIENT_SECRET: ${{ secrets.AUTH0_PROD_API_CLIENT_SECRET }}
          AUTH0_PROD_US_EAST_API_CLIENT_SECRET: ${{ secrets.AUTH0_PROD_US_EAST_API_CLIENT_SECRET }}
          AUTH0_PROD_AP_SOUTHEAST_API_CLIENT_SECRET: ${{ secrets.AUTH0_PROD_AP_SOUTHEAST_API_CLIENT_SECRET }}
          AUTH0_NAB_QA_API_CLIENT_SECRET: ${{ secrets.AUTH0_PROD_US_EAST_API_CLIENT_SECRET }}
          AUTH0_NAB_PROD_API_CLIENT_SECRET: ${{ secrets.AUTH0_PROD_US_EAST_API_CLIENT_SECRET }}
          AUTH0_PROD_CH_API_CLIENT_SECRET: ${{ secrets.AUTH0_PROD_CH_API_CLIENT_SECRET }}

          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          GRADLE_CACHE_USERNAME: ${{ secrets.GRADLE_CACHE_USERNAME }}
          GRADLE_CACHE_PASSWORD: ${{ secrets.GRADLE_CACHE_PASSWORD }}

          DEV_REDIS_HOST: ${{ secrets.DEV_REDIS_HOST }}
          DEV_REDIS_PORT: ${{ secrets.DEV_REDIS_PORT }}
          DEV_REDIS_AUTH_TOKEN: ${{ secrets.DEV_REDIS_AUTH_TOKEN }}

          E2E_USER_PASSWORD: ${{ secrets.E2E_USER_PASSWORD }}
          E2E_SSO_LOGIN_USER_PASSWORD: ${{ secrets.E2E_SSO_LOGIN_USER_PASSWORD }}

          environment: ${{ inputs.environment }}
        continue-on-error: true
        run: |
          ./gradlew :${{ inputs.test }}:check -Denvironment=${{ inputs.environment }} -isS
          # ls *
          # ls ./${{ inputs.test }}/*
          # ls ./${{ inputs.test }}/allure*

      - name: Copy result files for upload to GitHub Artifact
        if: always()
        run: |
          pwd
          mkdir github-artifact
          mv ${{ inputs.test }}/build/reports/tests/* github-artifact
          METADATA=$(echo "${{ inputs.metadata }}" | sed s/\'/\"/g)
          echo "METADATA: $METADATA"
          echo "$METADATA" > github-artifact/metadata.json
      

      # -------------------------------------- END-TEST --------------------------------------
      # ++++++++++++++++++++++++++++++++++++ START-REPORT ++++++++++++++++++++++++++++++++++++

      - name: Generate Allure reports
        if: always()
        run: |
          pwd
          mkdir ${{ inputs.test }}/allure-report
          echo "allure-results+++++++++++"
          ls ${{ inputs.test }}/allure-results/*
          echo "allure-results-----------"
          allure generate ${{ inputs.test }}/allure-results -o ${{ inputs.test }}/allure-report --clean
          ls ${{ inputs.test }}/allure-report/*

      - name: Upload plain test results to GitHub Artifact
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test-results
          path: github-artifact

      - name: Check cache
        if: always()
        run: |
          pwd
          ls ${{ inputs.environment }}-${{ inputs.test }}-test-histories/*

      - name: Init/Update cache
        if: always()
        run: |
          pwd
          cp -a -r ${{ inputs.environment }}-${{ inputs.test }}-test-histories/* ${{ inputs.test }}/allure-results
          echo "----------------------------------->>> Allure-results after merged"
          # ls ${{ inputs.test }}/allure-results/*
          mkdir ${{ inputs.test }}/allure-report2
          allure generate ${{ inputs.test }}/allure-results -o ${{ inputs.test }}/allure-report2 --clean
          echo "----------------------------------->>> New Allure report"
          # ls ${{ inputs.test }}/allure-report2/*
          cp -a -r ${{ inputs.test }}/allure-report2/history ${{ inputs.environment }}-${{ inputs.test }}-test-histories

      - name: Check cache after generating new report
        if: always()
        run: |
          pwd
          ls ${{ inputs.environment }}-${{ inputs.test }}-test-histories/*

      - name: Upload Allure results to GitHub Artifact
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: allure-results
          path: ${{ inputs.test }}/allure-results

      - name: Upload reports to S3
        if: always()
        uses: hawk-ai-aml/github-actions/upload-to-s3@master
        with:
          aws_access_key_id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          aws_bucket: github-actions-static-html-2
          source_dir: ${{ inputs.test }}/allure-report2
          destination_dir: e2e-${{ inputs.test }}-test-${{ env.CACHE_ID }}

      - name: Provide test result URL
        id: report-url
        if: always()
        run: |
          echo "url=https://github-actions-static-html-2.s3.eu-central-1.amazonaws.com/e2e-${{ inputs.test }}-test-${{ env.CACHE_ID }}/index.html" >> $GITHUB_OUTPUT

      - name: Check test status
        id: status
        if: steps.run-e2e-test.outcome != 'success'
        run: |
          echo "test_status=1" >> $GITHUB_OUTPUT

    # -------------------------------------- END-REPORT --------------------------------------
  test-results:
    needs: test
    runs-on: [ "self-hosted", "small-builder" ]
    environment:
      name: aws-s3
      url: ${{ needs.test.outputs.url }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - name: Mark with failed result if e2e test fails
        if: needs.test.outputs.test_status == 1
        run: |
          exit 1
