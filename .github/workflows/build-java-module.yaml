name: build-java-module

on:
  workflow_call:
    inputs:
      updateKustomize:
        description: "Update kustomize overlays"
        type: boolean
        required: false
      skipTests:
        description: "Skip extended testing (unit and other tests), only build artifacts"
        type: boolean
        required: false
        default: false
      kustomizeOverlays:
        description: "Overlays to update"
        type: string
        required: false
      component:
        type: string
        required: false
      module:
        type: string
        required: true
      profile:
        type: string
        required: false

defaults:
  run:
    shell: bash -l -ET -eo pipefail {0}

jobs:
  init:
    runs-on: [ "self-hosted", "builder" ]
    outputs:
      overlays: ${{ steps.init.outputs.overlays }}
      modules: ${{ steps.init.outputs.modules }}
      metadata: ${{ steps.init.outputs.metadata }}
      update-kustomize: ${{ steps.init.outputs.update-kustomize }}
      skip-tests: ${{ steps.init.outputs.skip-tests }}
      parameters: ${{ steps.init.outputs.parameters }}
    steps:
      - id: init
        name: Init Workflow
        uses: hawk-ai-aml/github-actions/workflow-init@master
        with:
          slack-notification-webhook: ${{ secrets.CICD_MIGRATION_SLACK_WEBHOOK_URL }}
          profile: ${{ inputs.profile }}
          component: ${{ inputs.component }}
          update-kustomize: ${{ inputs.updateKustomize }}
          overlays: ${{ inputs.kustomizeOverlays }}
          skip-tests: ${{ inputs.skipTests }}

  build:
    needs: [ init ]
    runs-on: [ "self-hosted", "builder" ]
    steps:
      - name: Init Job
        uses: hawk-ai-aml/github-actions/job-init@master
        with:
          slack-notification-webhook: ${{ secrets.CICD_MIGRATION_SLACK_WEBHOOK_URL }}

      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ fromJson(needs.init.outputs.parameters).java-version }}
          distribution: temurin
          cache: gradle

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        env:
          GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true

      - name: Gradle Assemble for <${{ inputs.component }}/${{ inputs.module }}>
        env:
          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          DISABLE_SLACK: true
        run: ./gradlew clean :${{ inputs.module }}:assemble :${{ inputs.module }}:testClasses -isS

      - name: License Report for <${{ inputs.component }}/${{ inputs.module }}>
        env:
          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          DISABLE_SLACK: true
        run: ./gradlew :${{ inputs.module }}:licenseReport --no-parallel

      - name: Check Quality for <${{ inputs.component }}/${{ inputs.module }}>
        env:
          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          DISABLE_SLACK: true
        run: ./gradlew :${{ inputs.module }}:checkQualityMain

      - name: Run Tests for <${{ inputs.component }}/${{ inputs.module }}>
        if: ${{ needs.init.outputs.skip-tests != 'true' }}
        env:
          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          DISABLE_SLACK: true
        run: |
          ./gradlew :${{ inputs.module }}:check :${{ inputs.module }}:jacocoTestReport :jacocoTestCoverageVerification -isS

      - name: Aggregate reports for upload
        if: needs.init.outputs.skip-tests != 'true' && (success() || failure())
        run: |
          for module in ${{ inputs.module }}; do
            mkdir -p reports/${module}/build
            if [[ -d ${module}/build/reports ]]; then
              cp -r ${module}/build/reports reports/${module}/build/reports
            fi
          done

      - name: Upload Reports to S3
        id: reports
        if: needs.init.outputs.skip-tests != 'true' && (success() || failure())
        uses: hawk-ai-aml/upload-s3-action@master
        with:
          aws_key_id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          aws_bucket: github-actions-static-html-2
          source_dir: reports
          destination_dir: ${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Provide Links to Reports
        if: needs.init.outputs.skip-tests != 'true' && (success() || failure())
        run: |
          echo "### Test Reports" | tee -a ${GITHUB_STEP_SUMMARY}
          report_url=https://github-actions-static-html-2.s3.amazonaws.com/${{ github.event.repository.name }}-${{ github.run_id }}/
          for report_file_loc in ${{ join(fromJSON(steps.reports.outputs.object_locations), ' ') }}; do
            report_basename=${report_file_loc##${report_url}}
            if [[ ${report_file_loc} == */main.html || ${report_file_loc} == */index.html || ${report_file_loc} == */licenseReport.html ]]; then
              echo "* [${report_basename}](${report_file_loc})" | tee -a ${GITHUB_STEP_SUMMARY}
            fi
          done

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ fromJson(needs.init.outputs.metadata).ecr.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ fromJson(needs.init.outputs.metadata).ecr.registry }}

      - name: Build Docker Images for <${{ inputs.component }}/${{ inputs.module }}>
        env:
          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_PREFIX: ${{ fromJson(needs.init.outputs.metadata).ecr.repository-prefix }}
        run: |
          ./gradlew :${{ inputs.module }}:jib \
            -DIMAGE_NAME="${ECR_REGISTRY}/${ECR_REPOSITORY_PREFIX}" \
            -DTAG_COMMIT=${{ env.HAWK_IMAGE_TAG }}

  update-overlays:
    needs: [ init, build ]
    if: ${{ needs.init.outputs.update-kustomize == 'true' }}
    runs-on: [ "self-hosted", "builder" ]
    steps:
      - name: Init Job
        uses: hawk-ai-aml/github-actions/job-init@master
        with:
          slack-notification-webhook: ${{ secrets.CICD_MIGRATION_SLACK_WEBHOOK_URL }}

      - name: Update kustomize overlay
        id: update-overlay-github
        uses: hawk-ai-aml/github-actions/kustomize-overlay-multi@master
        with:
          component-name: ${{ inputs.component }}
          component-modules: '["${{ inputs.module }}"]'
          component-overlays: ${{ needs.init.outputs.overlays }}
          component-tag: ${{ env.HAWK_IMAGE_TAG }}
          kustomize-repo: hawk-ai-aml/kustomize.git
          kustomize-access-token: ${{ secrets.REPO_ACCESS_PAT }}

# End of file
