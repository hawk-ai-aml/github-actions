name: build-java-mutil

on:
  workflow_call:
    inputs:
      updateKustomize:
        description: "Update kustomize overlays (true/false)"
        type: boolean
        required: false
      skipTests:
        description: "Skip extended testing (unit and other tests), only build artifacts"
        type: boolean
        required: false
        default: false
      kustomizeOverlays:
        description: "The indicated overlays (dev, test, qa, prod)"
        type: string
        required: false
      component:
        description: "Name of the repository"
        type: string
        required: false
      vulnerabilityCheck:
        description: "Conduct a vulnerability check using Lacework"
        type: boolean
        required: false
        default: false
      useSonarCloud:
        description: "Use SonarCloud for code quality checks"
        type: boolean
        required: false
        default: false

defaults:
  run:
    shell: bash -l -ET -eo pipefail {0}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  init:
    runs-on: [ "self-hosted", "small-builder" ]
    outputs:
      overlays: ${{ steps.init.outputs.overlays }}
      update-kustomize: ${{ steps.init.outputs.update-kustomize }}
      skip-tests: ${{ steps.init.outputs.skip-tests }}
      image-tag: ${{ steps.init.outputs.image-tag }}
      ecr-url: ${{ steps.init.outputs.ecr-url }}
      kustomize-modules: ${{ steps.init.outputs.kustomize-modules }}
      kustomize-modules-string: ${{ steps.init.outputs.kustomize-modules-string }}
      ecr-images: ${{ steps.init.outputs.ecr-images }}
      ecr-registry-code: ${{ steps.init.outputs.ecr-registry-code }}
      ecr-region: ${{ steps.init.outputs.ecr-region }}
      metadata: ${{ steps.init.outputs.metadata }}
      updated-modules: ${{ steps.detect-changes.outputs.updated-modules }}
      updated-modules-string: ${{ steps.detect-changes.outputs.updated-modules-string }}
      use-sonarcloud: ${{ steps.init.outputs.use-sonarcloud }}

    steps:
      - id: init
        name: Init Workflow
        uses: hawk-ai-aml/github-actions/workflow-init@master
        with:
          skip-tests: ${{ inputs.skipTests }}
          update-kustomize: ${{ inputs.updateKustomize }}
          overlays: ${{ inputs.kustomizeOverlays }}
          repository-name: hawk-ai-aml/${{ inputs.component }}
          repository-ref: ${{ env.GITHUB_REF_NAME }}
          repository-access-token: ${{ secrets.REPO_ACCESS_PAT }}
          use-sonarcloud: ${{ inputs.useSonarCloud }}

      - id: detect-changes
        name: Detect changes
        uses: hawk-ai-aml/github-actions/repository-detect-changes@master
        with:
          repository: hawk-ai-aml/${{ inputs.component }}
          repository-ref: ${{ env.GITHUB_REF_NAME }}
          repository-user: ${{ secrets.RECREATE_DEVELOP_GITHUB_USER }}
          repository-access-token: ${{ secrets.REPO_ACCESS_PAT }}
          modules-string: ${{ steps.init.outputs.kustomize-modules-string }}

  build:
    needs: [ init ]
    runs-on: [ "self-hosted", "builder" ]
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(needs.init.outputs.updated-modules) }}

    steps:
      - name: Checkout master
        uses: actions/checkout@v4
        with:
          ref: master
          # From SonarCloud Scan GitHub Action
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 1000
      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_REF_NAME }}
          # From SonarCloud Scan GitHub Action
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 1000

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ fromJson(needs.init.outputs.metadata).java-version }}
          distribution: temurin
          cache: gradle

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        env:
          GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true

      - name: Gradle Assemble
        env:
          CI_BUILD: true
          GRADLE_CACHE_CI_PASSWORD: ${{ secrets.GRADLE_CACHE_CI_PASSWORD }}
          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          GRADLE_CACHE_USERNAME: ${{ secrets.GRADLE_CACHE_USERNAME }}
          GRADLE_CACHE_PASSWORD: ${{ secrets.GRADLE_CACHE_PASSWORD }}
          DISABLE_SLACK: true
        run: |
          ./gradlew clean :${{ matrix.module }}:assemble :${{ matrix.module }}:testClasses -isS

      - name: Check Quality
        env:
          CI_BUILD: true
          GRADLE_CACHE_CI_PASSWORD: ${{ secrets.GRADLE_CACHE_CI_PASSWORD }}
          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          GRADLE_CACHE_USERNAME: ${{ secrets.GRADLE_CACHE_USERNAME }}
          GRADLE_CACHE_PASSWORD: ${{ secrets.GRADLE_CACHE_PASSWORD }}
          DISABLE_SLACK: true
        run: |
          ./gradlew :${{ matrix.module }}:checkQualityMain

      - name: Run Tests
        if: ${{ needs.init.outputs.skip-tests != 'true' && needs.init.outputs.use-sonarcloud != 'true'}}
        env:
          CI_BUILD: true
          GRADLE_CACHE_CI_PASSWORD: ${{ secrets.GRADLE_CACHE_CI_PASSWORD }}
          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          GRADLE_CACHE_USERNAME: ${{ secrets.GRADLE_CACHE_USERNAME }}
          GRADLE_CACHE_PASSWORD: ${{ secrets.GRADLE_CACHE_PASSWORD }}
          DISABLE_SLACK: true
        run: |
          ./gradlew :${{ matrix.module }}:check -isS
          ./gradlew :${{ matrix.module }}:jacocoTestReport
          ./gradlew :${{ matrix.module }}:jacocoTestCoverageVerification

      - name: Run Tests With Sonar
        if: ${{ needs.init.outputs.skip-tests != 'true' && needs.init.outputs.use-sonarcloud == 'true'}}
        env:
          CI_BUILD: true
          GRADLE_CACHE_CI_PASSWORD: ${{ secrets.GRADLE_CACHE_CI_PASSWORD }}
          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          GRADLE_CACHE_USERNAME: ${{ secrets.GRADLE_CACHE_USERNAME }}
          GRADLE_CACHE_PASSWORD: ${{ secrets.GRADLE_CACHE_PASSWORD }}
          DISABLE_SLACK: true
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
        run: |
          ./gradlew :${{ matrix.module }}:check -isS
          ./gradlew :${{ matrix.module }}:jacocoTestReport codeCoverageReport sonar

      - name: License Report
        env:
          CI_BUILD: true
          GRADLE_CACHE_CI_PASSWORD: ${{ secrets.GRADLE_CACHE_CI_PASSWORD }}
          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          GRADLE_CACHE_USERNAME: ${{ secrets.GRADLE_CACHE_USERNAME }}
          GRADLE_CACHE_PASSWORD: ${{ secrets.GRADLE_CACHE_PASSWORD }}
          DISABLE_SLACK: true
        run: |
          ./gradlew :${{ matrix.module }}:licenseReport --no-parallel

      - name: Aggregate reports for upload
        if: needs.init.outputs.skip-tests != 'true' && (success() || failure())
        run: |
          mkdir -p reports/${{ matrix.module }}/build
          if [[ -d ${{ matrix.module }}/build/reports ]]; then
            cp -r ${{ matrix.module }}/build/reports reports/${{ matrix.module }}/build/reports
          fi
          
          if [[ -d ${{ matrix.module }}/build/jacocoHtml ]]; then
            cp -r ${{ matrix.module }}/build/jacocoHtml reports/${{ matrix.module }}/build/reports
          fi

      - name: Upload Reports to S3
        id: reports
        if: needs.init.outputs.skip-tests != 'true' && (success() || failure())
        uses: hawk-ai-aml/github-actions/upload-to-s3@master
        with:
          module: ${{ matrix.module }}
          aws_access_key_id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          aws_bucket: github-actions-static-html-2
          source_dir: reports/${{ matrix.module }}/build
          destination_dir: ${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Get ECR info
        id: ecr-info
        env:
          METADATA: ${{ needs.init.outputs.metadata }}
        run: |
          MODULE_ECR=$(echo ${METADATA} | jq -cr --arg MODULE ${{ matrix.module }} '.modules[$MODULE].ecr')
          echo "ECR=$MODULE_ECR"
          echo "module_ecr=$MODULE_ECR" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        if: ${{ github.workflow != 'pr' && steps.ecr-info.outputs.module_ecr != 'null' }}
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.init.outputs.ecr-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        if: ${{ github.workflow != 'pr' && steps.ecr-info.outputs.module_ecr != 'null' }}
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ needs.init.outputs.ecr-registry-code }}

      - name: check if docker image tag exists in ECR
        id: check-tag
        if: ${{ github.workflow != 'pr' && steps.ecr-info.outputs.module_ecr != 'null' }}
        uses: hawk-ai-aml/github-actions/check-docker-tag-exists@master
        with:
          ecr-registry: ${{ steps.login-ecr.outputs.registry }}
          ecr-repository: ${{ steps.ecr-info.outputs.module_ecr }}
          image-tag: ${{ needs.init.outputs.image-tag }}

      - name: Build Docker Image
        if: ${{ github.workflow != 'pr' && steps.ecr-info.outputs.module_ecr != 'null' && steps.check-tag.outputs.tag_already_exists != 'true' }}
        env:
          CI_BUILD: true
          GRADLE_CACHE_CI_PASSWORD: ${{ secrets.GRADLE_CACHE_CI_PASSWORD }}
          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          GRADLE_CACHE_USERNAME: ${{ secrets.GRADLE_CACHE_USERNAME }}
          GRADLE_CACHE_PASSWORD: ${{ secrets.GRADLE_CACHE_PASSWORD }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_PREFIX: ${{ fromJson(needs.init.outputs.metadata).ecr.repository-prefix }}
          IMAGE_TAG: ${{ needs.init.outputs.image-tag }}
        run: |
          ./gradlew :${{ matrix.module }}:jib \
            -DIMAGE_NAME="${ECR_REGISTRY}/${ECR_REPOSITORY_PREFIX}" \
            -DTAG_COMMIT=${IMAGE_TAG}

  check-if-all-builds-passed:
    if: always()
    needs: [ build ]
    runs-on: [ "self-hosted", "small-builder" ]
    steps:
      - name: Check Build Job Failure
        if: ${{ needs.build.result == 'failure' }}
        run: exit 1

      - name: Check Build Job Success
        if: ${{ needs.build.result == 'success' }}
        run: exit 0

      - name: Slack notification for failed build status
        uses: hawk-ai-aml/github-actions/send-slack-notification@master
        if: failure()
        with:
          notify-pr-author: true
          slack-message: ":x: Your build failed. Please check the reason for it."
          slack-access-token: ${{ secrets.SLACK_RELEASE_BOT_ACCESS_TOKEN }}
          github-users-access-token: ${{ secrets.USER_GITHUB_ACCESS }}

  vulnerability-check-run:
    if: ${{ inputs.vulnerabilityCheck == true }}
    needs: [ init, build ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        image: ${{ fromJson(needs.init.outputs.ecr-images) }}

    steps:
      - name: Vulnerability check
        uses: hawk-ai-aml/github-actions/vulnerability-check@master
        with:
          ecr-region: ${{ needs.init.outputs.ecr-region }}
          ecr-registry-code: ${{ needs.init.outputs.ecr-registry-code }}
          image-name: ${{ matrix.image }}
          image-tag: ${{ needs.init.outputs.image-tag }}
          ecr-url: ${{ needs.init.outputs.ecr-url }}
          aws-access-key-id: ${{ secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
          java-offline-mode: ${{ env.LACEWORK_JAVA_OFFLINE_MODE }}
          lacework-account-name: ${{ secrets.LACEWORK_ACCOUNT_NAME }}
          lacework-access-token: ${{ secrets.LACEWORK_ACCESS_TOKEN }}

  update-overlays:
    needs: [ init, build ]
    if: ${{ needs.init.outputs.update-kustomize == 'true' && github.workflow != 'pr' }}
    runs-on: [ "self-hosted", "small-builder" ]

    steps:
      - name: Update kustomize overlay
        uses: hawk-ai-aml/github-actions/kustomize-overlay@master
        with:
          slack-access-token: ${{ secrets.SLACK_RELEASE_BOT_ACCESS_TOKEN }}
          github-users-access-token: ${{ secrets.USER_GITHUB_ACCESS }}
          overlays: ${{ needs.init.outputs.overlays }}
          modules: ${{ needs.init.outputs.updated-modules-string }}
          component-name: ${{ inputs.component }}
          component-tag: ${{ needs.init.outputs.image-tag }}
          kustomize-repo: hawk-ai-aml/kustomize.git
          kustomize-access-token: ${{ secrets.REPO_ACCESS_PAT }}
          ecr-region: ${{ needs.init.outputs.ecr-region }}
          ecr-registry-code: ${{ needs.init.outputs.ecr-registry-code }}
          metadata: ${{ needs.init.outputs.metadata }}

# End of file
