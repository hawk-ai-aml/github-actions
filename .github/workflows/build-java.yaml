name: build

on:
  workflow_call:
    inputs:
      updateKustomize:
        description: "Update kustomize overlays (true/false)"
        type: boolean
        required: false
      skipTests:
        description: "Skip extended testing (unit and other tests), only build artifacts"
        type: boolean
        required: false
        default: false
      kustomizeOverlays:
        description: "The indicated overlays (dev, test, qa, prod)"
        type: string
        required: false
      component:
        description: "Name of the repository"
        type: string
        required: false
      base-tag:
        description: "This tag will be used in case we have a specific base image tag (now watchtower and label-engine only)"
        type: string
        required: false
      vulnerabilityCheck:
        description: "Conduct a vulnerability check using Lacework"
        type: boolean
        required: false
        default: false

defaults:
  run:
    shell: bash -l -ET -eo pipefail {0}

jobs:
  init:
    runs-on: [ "self-hosted", "small-builder" ]
    outputs:
      overlays: ${{ steps.init.outputs.overlays }}
      update-kustomize: ${{ steps.init.outputs.update-kustomize }}
      skip-tests: ${{ steps.init.outputs.skip-tests }}
      image-tag: ${{ steps.init.outputs.image-tag }}
      ecr-url: ${{ steps.init.outputs.ecr-url }}
      kustomize-modules: ${{ steps.init.outputs.kustomize-modules }}
      kustomize-modules-string: ${{ steps.init.outputs.kustomize-modules-string }}
      ecr-images: ${{ steps.init.outputs.ecr-images }}
      ecr-registry-code: ${{ steps.init.outputs.ecr-registry-code }}
      ecr-region: ${{ steps.init.outputs.ecr-region }}
      metadata: ${{ steps.init.outputs.metadata }}

    steps:
      - id: init
        name: Init Workflow
        uses: hawk-ai-aml/github-actions/workflow-init@master
        with:
          skip-tests: ${{ inputs.skipTests }}
          update-kustomize: ${{ inputs.updateKustomize }}
          overlays: ${{ inputs.kustomizeOverlays }}
          repository-name: hawk-ai-aml/${{ inputs.component }}
          repository-ref: ${{ env.GITHUB_REF_NAME }}
          repository-access-token: ${{ secrets.REPO_ACCESS_PAT }}

  build:
    needs: [ init ]
    runs-on: [ "self-hosted", "builder" ]

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.init.outputs.ecr-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ needs.init.outputs.ecr-registry-code }}

      - name: check if docker image tag exists in ECR
        id: check-tag
        uses: hawk-ai-aml/github-actions/check-docker-tag-exists@master
        with:
          ecr-registry: ${{ steps.login-ecr.outputs.registry }}
          ecr-repository: ${{ fromJson(needs.init.outputs.metadata).ecr.repository }}
          image-tag: ${{ needs.init.outputs.image-tag }}

      - name: Build Docker image
        if: ${{ github.workflow != 'pr' }}
        env:
          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          GRADLE_CACHE_USERNAME: ${{ secrets.GRADLE_CACHE_USERNAME }}
          GRADLE_CACHE_PASSWORD: ${{ secrets.GRADLE_CACHE_PASSWORD }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ fromJson(needs.init.outputs.metadata).ecr.repository }}
          BASE_TAG: ${{ inputs.base-tag }}
          IMAGE_TAG: ${{ needs.init.outputs.image-tag }}
        run: |
          ./gradlew jib -DIMAGE_NAME="${ECR_REGISTRY}/${ECR_REPOSITORY}" -DTAG_COMMIT=${IMAGE_TAG}

  vulnerability-check-run:
    if: ${{ inputs.vulnerabilityCheck == true }}
    needs: [ init, build ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        image: ${{ fromJson(needs.init.outputs.ecr-images) }}

    steps:
      - name: Vulnerability check
        uses: hawk-ai-aml/github-actions/vulnerability-check@master
        with:
          ecr-region: ${{ needs.init.outputs.ecr-region }}
          ecr-registry-code: ${{ needs.init.outputs.ecr-registry-code }}
          image-name: ${{ matrix.image }}
          image-tag: ${{ needs.init.outputs.image-tag }}
          ecr-url: ${{ needs.init.outputs.ecr-url }}
          aws-access-key-id: ${{ secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
          java-offline-mode: ${{ env.LACEWORK_JAVA_OFFLINE_MODE }}
          lacework-account-name: ${{ secrets.LACEWORK_ACCOUNT_NAME }}
          lacework-access-token: ${{ secrets.LACEWORK_ACCESS_TOKEN }}

  update-overlays:
    needs: [ init, build ]
    if: ${{ needs.init.outputs.update-kustomize == 'true' && github.workflow != 'pr' }}
    runs-on: [ "self-hosted", "small-builder" ]

    steps:
      - name: Update kustomize overlay
        uses: hawk-ai-aml/github-actions/kustomize-overlay@master
        with:
          overlays: ${{ needs.init.outputs.overlays }}
          modules: ${{ needs.init.outputs.kustomize-modules-string }}
          component-name: ${{ inputs.component }}
          component-tag: ${{ needs.init.outputs.image-tag }}
          kustomize-repo: hawk-ai-aml/kustomize.git
          kustomize-access-token: ${{ secrets.REPO_ACCESS_PAT }}
          ecr-region: ${{ needs.init.outputs.ecr-region }}
          ecr-registry-code: ${{ needs.init.outputs.ecr-registry-code }}
          metadata: ${{ needs.init.outputs.metadata }}
