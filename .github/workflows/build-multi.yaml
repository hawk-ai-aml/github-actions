name: build

on:
  workflow_call:
    inputs:
      updateKustomize:
        description: "Update kustomize overlays"
        type: boolean
        required: false
      skipTests:
        description: "Skip extended testing (unit and other tests), only build artifacts"
        type: boolean
        required: false
        default: false
      kustomizeOverlays:
        description: "Overlays to update"
        type: string
        required: false
      component:
        type: string
        required: false
      profile:
        type: string
        required: false
      vulnerabilityCheck:
        description: "Conduct a vulnerability check using Lacework"
        type: boolean
        required: false
        default: false

defaults:
  run:
    shell: bash -l -ET -eo pipefail {0}

jobs:
  init:
    runs-on: [ "self-hosted", "builder" ]
    outputs:
      overlays: ${{ steps.init.outputs.overlays }}
      modules: ${{ steps.init.outputs.modules }}
      kustomizable-modules: ${{ steps.init.outputs.kustomizable-modules }}
      metadata: ${{ steps.init.outputs.metadata }}
      update-kustomize: ${{ steps.init.outputs.update-kustomize }}
      skip-tests: ${{ steps.init.outputs.skip-tests }}
      parameters: ${{ steps.init.outputs.parameters }}
    steps:
      - id: init
        name: Init Workflow
        uses: hawk-ai-aml/github-actions/workflow-init@feature/sre-1309-7
        with:
          slack-notification-webhook: ${{ secrets.CICD_MIGRATION_SLACK_WEBHOOK_URL }}
          profile: ${{ inputs.profile }}
          component: ${{ inputs.component }}
          update-kustomize: ${{ inputs.updateKustomize }}
          overlays: ${{ inputs.kustomizeOverlays }}
          skip-tests: ${{ inputs.skipTests }}
          vulnerabilityCheck: ${{ inputs.vulnerabilityCheck }}

  build:
    needs: [ init ]
    runs-on: [ "self-hosted", "builder" ]
    steps:
      - id: init
        name: Init Job
        uses: hawk-ai-aml/github-actions/job-init@master
        with:
          slack-notification-webhook: ${{ secrets.CICD_MIGRATION_SLACK_WEBHOOK_URL }}

      - name: debug-output
        run: |
          echo "${{ inputs.profile }}"
          echo "${{ inputs.updateKustomize }}"

#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}

#      - uses: actions/checkout@v3

#      - name: Set up JDK
#        uses: actions/setup-java@v3
#        with:
#          java-version: ${{ fromJson(needs.init.outputs.parameters).java-version }}
#          distribution: temurin
#          cache: gradle

#      - name: Set up Gradle
#        uses: gradle/gradle-build-action@v2
#        env:
#          GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true

#      - name: Gradle Assemble
#        env:
#          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
#          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
#          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
#          DISABLE_SLACK: true
#        run: ./gradlew clean assemble testClasses -isS

#      - name: License Report
#        env:
#          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
#          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
#          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
#          DISABLE_SLACK: true
#        run: ./gradlew licenseReport --no-parallel

#      - name: Check Quality
#        env:
#          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
#          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
#          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
#          DISABLE_SLACK: true
#        run: ./gradlew checkQualityMain

#      - name: Run Tests
#        if: ${{ needs.init.outputs.skip-tests != 'true' }}
#        env:
#          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
#          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
#          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
#          DISABLE_SLACK: true
#        run: |
#          ./gradlew check -isS
#          ./gradlew aggregateJacocoExecutions

#      - name: Aggregate reports for upload
#        if: needs.init.outputs.skip-tests != 'true' && (success() || failure())
#        env:
#          METADATA: ${{ needs.init.outputs.metadata }}
#        run: |
#          for module in $(echo ${METADATA} | jq -r '.modules | keys | join(" ")'); do
#            mkdir -p reports/${module}/build
#            if [[ -d ${module}/build/reports ]]; then
#              cp -r ${module}/build/reports reports/${module}/build/reports
#            fi
#          done

#      - name: Upload Reports to S3
#        id: reports
#        if: needs.init.outputs.skip-tests != 'true' && (success() || failure())
#        uses: hawk-ai-aml/upload-s3-action@master
#        with:
#          aws_key_id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
#          aws_secret_access_key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
#          aws_bucket: github-actions-static-html-2
#          source_dir: reports
#          destination_dir: ${{ github.event.repository.name }}-${{ github.run_id }}

#      - name: Provide Links to Reports
#        if: needs.init.outputs.skip-tests != 'true' && (success() || failure())
#        run: |
#          echo "### Test Reports" | tee -a ${GITHUB_STEP_SUMMARY}
#          report_url=https://github-actions-static-html-2.s3.amazonaws.com/${{ github.event.repository.name }}-${{ github.run_id }}/
#          for report_file_loc in ${{ join(fromJSON(steps.reports.outputs.object_locations), ' ') }}; do
#            report_basename=${report_file_loc##${report_url}}
#            if [[ ${report_file_loc} == */main.html || ${report_file_loc} == */index.html || ${report_file_loc} == */licenseReport.html ]]; then
#              echo "* [${report_basename}](${report_file_loc})" | tee -a ${GITHUB_STEP_SUMMARY}
#            fi
#          done

#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1-node16
#        with:
#          aws-access-key-id: ${{ inputs.profile == 'nab' && secrets.AWS_NAB_DEV_ECR_ACCESS_KEY_ID || secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ inputs.profile == 'nab' && secrets.AWS_NAB_DEV_ECR_SECRET_ACCESS_KEY || secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
#          aws-region: ${{ fromJson(needs.init.outputs.metadata).ecr.region }}

#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#        with:
#          registries: ${{ fromJson(needs.init.outputs.metadata).ecr.registry }}

#      - name: Build Docker Images
#        env:
#          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
#          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
#          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY_PREFIX: ${{ fromJson(needs.init.outputs.metadata).ecr.repository-prefix }}
#        run: |
#          ./gradlew build -Dskip.tests=true -x test
#          ./gradlew jibDockerBuild \
#            -DIMAGE_NAME="${ECR_REGISTRY}/${ECR_REPOSITORY_PREFIX}" \
#            -DTAG_COMMIT=${{ env.HAWK_IMAGE_TAG }} \
#            -DIS_NAB=${{ inputs.profile == 'nab' }}

#      - name: Push Docker Images
#        id: push-image
#        env:
#          METADATA: ${{ needs.init.outputs.metadata }}
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        run: |
#          for module in $(echo ${METADATA} | jq -cr '.modules | keys | join(" ")'); do
#            module_repository=$(echo ${METADATA} | jq -cr --arg MODULE ${module} '.modules[$MODULE].ecr.repository')
#            [[ "${module_repository}" == "null" ]] && continue
#            echo "Module ${module} is configured to push image to ECR repository ${module_repository}"

#            hawk.push-docker-image ${ECR_REGISTRY}/${module_repository}:${{ env.HAWK_IMAGE_TAG }}
#          done

  vulnerability-check-init-hawk:
    if: ${{ inputs.profile == 'hawk'}}
    needs: [ init, build ]
    runs-on: ubuntu-latest
    outputs:
      imageList: ${{ steps.composeImageList.outputs.images }}
    steps:
      - name: debug-output
        run: |
          echo "${{ inputs.profile }}"
          echo "${{ inputs.updateKustomize }}"        

      - name: Compose Image List
        id: composeImageList
        env:
          METADATA: ${{ needs.init.outputs.metadata }}
          ECR_REGISTRY: ${{ fromJson(needs.init.outputs.metadata).ecr.registry }}
        run: |
          # In order to scan all images within the multi module gradle project we need a list of all repositories.
          # We convert this list into a JSON array and save it to $GITHUB_OUTPUT so we can use it in the next job as input for the matrix
          list="[ "
          for module in $(echo ${METADATA} | jq -cr '.modules | keys | join(" ")'); do
            module_repository=$(echo ${METADATA} | jq -cr --arg MODULE ${module} '.modules[$MODULE].ecr.repository')
            [[ "${module_repository}" == "null" ]] && continue
            echo "Module ${module} is configured to push image to ECR repository ${module_repository}"
    
            list="${list} \"${ECR_REGISTRY}.dkr.ecr.eu-central-1.amazonaws.com/${module_repository}\", "
          done
          list="${list} ]"
          echo ${list}
          echo "images=${list}" >> $GITHUB_OUTPUT

  vulnerability-check-init-nab:
    if: ${{ inputs.profile == 'nab'}}
    needs: [ init, build ]
    runs-on: ubuntu-latest
    outputs:
      imageList: ${{ steps.composeImageList.outputs.images }}
    steps:
      - name: debug-output
        run: |
          echo "${{ inputs.profile }}"
          echo "${{ inputs.updateKustomize }}"        

      - name: Compose Image List
        id: composeImageList
        env:
          METADATA: ${{ needs.init.outputs.metadata }}
          ECR_REGISTRY: ${{ fromJson(needs.init.outputs.metadata).ecr.registry }}
        run: |
          # In order to scan all images within the multi module gradle project we need a list of all repositories.
          # We convert this list into a JSON array and save it to $GITHUB_OUTPUT so we can use it in the next job as input for the matrix
          list="[ "
          for module in $(echo ${METADATA} | jq -cr '.modules | keys | join(" ")'); do
            module_repository=$(echo ${METADATA} | jq -cr --arg MODULE ${module} '.modules[$MODULE].ecr.repository')
            [[ "${module_repository}" == "null" ]] && continue
            echo "Module ${module} is configured to push image to ECR repository ${module_repository}"
          
            list="${list} \"${ECR_REGISTRY}.dkr.ecr.eu-central-1.amazonaws.com/${module_repository}\", "
          done
          list="${list} ]"
          echo ${list}
          echo "images=${list}" >> $GITHUB_OUTPUT


#  vulnerability-check-run:
#    if: |
#      ${{ github.event.inputs.profile == 'hawk' &&
#      github.event.inputs.vulnerabilityCheck == 'true' }}
#    needs: [ init, vulnerability-check-init ]
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      max-parallel: 10
#      matrix:
#        test: ${{ fromJSON(needs.vulnerability-check-init.outputs.imageList) }}
#    steps:
#      - id: init
#        name: Init Job
#        uses: hawk-ai-aml/github-actions/job-init@master
#        with:
#          slack-notification-webhook: ${{ secrets.CICD_MIGRATION_SLACK_WEBHOOK_URL }}

#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1-node16
#        with:
#          aws-access-key-id: ${{ inputs.profile == 'nab' && secrets.AWS_NAB_DEV_ECR_ACCESS_KEY_ID || secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ inputs.profile == 'nab' && secrets.AWS_NAB_DEV_ECR_SECRET_ACCESS_KEY || secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
#          aws-region: ${{ fromJson(needs.init.outputs.metadata).ecr.region }}

#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#        with:
#          registries: ${{ fromJson(needs.init.outputs.metadata).ecr.registry }}

#      - name: Retrieve AWS ECR login password for Lacework
#        id: ecrLoginPassword
#        run: echo "loginPassword=$(aws ecr get-login-password --region eu-central-1)" >> $GITHUB_OUTPUT

#      - uses: lacework/lw-scanner-action@v1.3.1
#        name: Scan container image for vulnerabilities using Lacework
#        env:
#          JAVA_OFFLINE_MODE: ${{ env.LACEWORK_JAVA_OFFLINE_MODE }}
#        with:
#          LW_ACCOUNT_NAME: ${{ secrets.LACEWORK_ACCOUNT_NAME }}
#          LW_ACCESS_TOKEN: ${{ secrets.LACEWORK_ACCESS_TOKEN }}
#          IMAGE_NAME: ${{ matrix.test }}
#          IMAGE_TAG: ${{ env.HAWK_IMAGE_TAG }}
#          SAVE_RESULTS_IN_LACEWORK: true
#          ADDITIONAL_PARAMETERS: --docker-username AWS --docker-server https://860641649575.dkr.ecr.eu-central-1.amazonaws.com --docker-password ${{ steps.ecrLoginPassword.outputs.loginPassword }}

  update-overlays:
    needs: [ init, build ]
    if: ${{ needs.init.outputs.update-kustomize == 'true' }}
    runs-on: [ "self-hosted", "builder" ]
    steps:
      - id: init
        name: Init Job
        uses: hawk-ai-aml/github-actions/job-init@master
        with:
          slack-notification-webhook: ${{ secrets.CICD_MIGRATION_SLACK_WEBHOOK_URL }}

      - id: udpate-overlay-github
        name: Update kustomize overlay
        if: fromJson(needs.init.outputs.parameters).kustomize == 'github' || fromJson(needs.init.outputs.parameters).kustomize == 'github-fake'
        uses: hawk-ai-aml/github-actions/kustomize-overlay-multi@master
        with:
          component-name: ${{ inputs.component }}
          component-modules: ${{ needs.init.outputs.kustomizable-modules }}
          component-overlays: ${{ needs.init.outputs.overlays }}
          component-tag: ${{ env.HAWK_IMAGE_TAG }}
          kustomize-repo: ${{ fromJson(needs.init.outputs.parameters).kustomize == 'github-fake' && 'hawk-ai-aml/kustomize2.git' || 'hawk-ai-aml/kustomize.git' }}
          kustomize-access-token: ${{ secrets.REPO_ACCESS_PAT }}

      - id: udpate-overlay-bitbucket
        name: Update kustomize overlays
        if: fromJson(needs.init.outputs.parameters).kustomize == 'bitbucket' || fromJson(needs.init.outputs.parameters).kustomize == 'bitbucket-fake'
        uses: hawk-ai-aml/github-actions/kustomize-overlay-ssh-multi@master
        with:
          component-name: ${{ inputs.component }}
          component-modules: ${{ needs.init.outputs.kustomizable-modules }}
          component-overlays: ${{ needs.init.outputs.overlays }}
          component-tag: ${{ env.HAWK_IMAGE_TAG }}
          kustomize-repo: ${{ fromJson(needs.init.outputs.parameters).kustomize == 'bitbucket-fake' && 'git@bitbucket.org:hawkai/kustomize2.git' || 'git@bitbucket.org:hawkai/kustomize.git' }}
          kustomize-ssh-key: ${{ secrets.KUSTOMIZE_DEPLOY_PRIVATE_KEY }}

# End of file
