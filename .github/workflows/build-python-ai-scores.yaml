name: build

on:
  workflow_call:
    inputs:
      updateKustomize:
        description: "Update kustomize overlays"
        type: boolean
        required: false
      skipTests:
        description: "Skip extended testing (unit and other tests), only build artifacts"
        type: boolean
        required: false
        default: false
      kustomizeOverlays:
        description: "Overlays to update"
        type: string
        required: false
      component:
        type: string
        required: false
      profile:
        type: string
        required: false

jobs:
  init:
    runs-on: [ "self-hosted", "builder" ]
    outputs:
      overlays: ${{ steps.init.outputs.overlays }}
      metadata: ${{ steps.init.outputs.metadata }}
      update-kustomize: ${{ steps.init.outputs.update-kustomize }}
      skip-tests: ${{ steps.init.outputs.skip-tests }}
      parameters: ${{ steps.init.outputs.parameters }}
    steps:
      - id: init
        name: Init Workflow
        uses: hawk-ai-aml/github-actions/workflow-init@python-ai-scores
        with:
          profile: ${{ inputs.profile }}
          component: ${{ inputs.component }}
          update-kustomize: ${{ inputs.updateKustomize }}
          overlays: ${{ inputs.kustomizeOverlays }}
          skip-tests: ${{ inputs.skipTests }}

  build:
    needs: init
    runs-on: ubuntu-latest
    steps:
      - id: init
        name: Init Job
        uses: hawk-ai-aml/github-actions/job-init@python-ai-scores

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install pipenv
        run: pip install pipenv


      - name: Run Pytest
        env:
          JENKINS: true
          IS_JENKINS: true
          AWS_ACCESS_KEY_ID: ${{ secrets.BACKEND_FILE_AWS_ACCESS_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.BACKEND_FILE_AWS_SECRET_ACCESS_KEY }}
        run: |
          pipenv install --dev
          pipenv lock --keep-outdated > pipenv-requirements.txt
          pipenv requirements > requirements.txt
          pipenv run pip install -r manual-requirements.txt
          pipenv run pytest tests --junitxml=report.xml
          pipenv run junit2html report.xml report.html
          mkdir report-dir && mv report.html ./report-dir/report.html

      - name: Upload Reports to S3
        id: reports
        if: needs.init.outputs.skip-tests != 'true' && (success() || failure())
        uses: hawk-ai-aml/upload-s3-action@master
        with:
          aws_key_id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          aws_bucket: github-actions-static-html-2
          source_dir: ./report-dir
          destination_dir: ${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ inputs.profile == 'nab' && secrets.AWS_NAB_DEV_ECR_ACCESS_KEY_ID || secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ inputs.profile == 'nab' && secrets.AWS_NAB_DEV_ECR_SECRET_ACCESS_KEY || secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ fromJson(needs.init.outputs.metadata).ecr.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ fromJson(needs.init.outputs.metadata).ecr.registry }}

      - name: Build and push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          for module in opening_anomaly opening_phishing opening_fan_in autoclosing
          do
            REPOSITORY_FOLDER=$(echo ${module} | sed 's/\_/\-/g')
            REPOSITORY_FULL_NAME="${ECR_REGISTRY}/ai-scores-${REPOSITORY_FOLDER}"
            echo "$REPOSITORY_FULL_NAME is building..."
            DOCKER_BUILDKIT=1 docker build --cache-from mjhea0/docker-ci-cache:latest --build-arg SERVICE=${module} --build-arg BUILDKIT_INLINE_CACHE=1 -t ${REPOSITORY_FULL_NAME}:${{ env.HAWK_IMAGE_TAG }} .
            docker push ${REPOSITORY_FULL_NAME}:${{ env.HAWK_IMAGE_TAG }}
          done

  update-overlays:
    needs: [ init, build ]
    if: ${{ needs.init.outputs.update-kustomize == 'true' }}
    runs-on: [ "self-hosted", "builder" ]
    strategy:
      # Avoid race condition issues with github
      max-parallel: 1
      matrix:
        overlay: ${{fromJson(needs.init.outputs.overlays)}}

    steps:
      - id: init
        name: Init Job
        uses: hawk-ai-aml/github-actions/job-init@python-ai-scores

      - id: udpate-overlay-github
        name: Update kustomize overlay (GitHub)
        if: fromJson(needs.init.outputs.parameters).kustomize == 'github' || fromJson(needs.init.outputs.parameters).kustomize == 'github-fake'
        uses: hawk-ai-aml/github-actions/kustomize-overlay@python-ai-scores
        with:
          component-name: ${{ inputs.component }}
          component-metadata: ${{ needs.init.outputs.metadata }}
          component-overlay: ${{ matrix.overlay }}
          component-tag: ${{ env.HAWK_IMAGE_TAG }}
          kustomize-repo: ${{ fromJson(needs.init.outputs.parameters).kustomize == 'github-fake' && 'hawk-ai-aml/kustomize2.git' || 'hawk-ai-aml/kustomize.git' }}
          kustomize-access-token: ${{ secrets.REPO_ACCESS_PAT }}

      - id: udpate-overlay-bitbucket
        name: Update kustomize overlay (Bitbucket)
        if: fromJson(needs.init.outputs.parameters).kustomize == 'bitbucket' || fromJson(needs.init.outputs.parameters).kustomize == 'bitbucket-fake'
        uses: hawk-ai-aml/github-actions/kustomize-overlay-ssh@python-ai-scores
        with:
          component-name: ${{ inputs.component }}
          component-metadata: ${{ needs.init.outputs.metadata }}
          component-overlay: ${{ matrix.overlay }}
          component-tag: ${{ env.HAWK_IMAGE_TAG }}
          kustomize-repo: ${{ fromJson(needs.init.outputs.parameters).kustomize == 'bitbucket-fake' && 'git@bitbucket.org:hawkai/kustomize2.git' || 'git@bitbucket.org:hawkai/kustomize.git' }}
          kustomize-ssh-key: ${{ secrets.KUSTOMIZE_DEPLOY_PRIVATE_KEY }}
