name: build

on:
  workflow_call:
    inputs:
      updateKustomize:
        description: "Update kustomize overlays"
        type: boolean
        required: false
      skipTests:
        description: "Skip extended testing (unit and other tests), only build artifacts"
        type: boolean
        required: false
        default: false
      kustomizeOverlays:
        description: "Overlays to update"
        type: string
        required: false
      environments:
        type: string
        required: true
      modules:
        type: string
        required: true
      modules-string:
        type: string
        required: true
      kustomize-repository:
        type: string
        required: true
      profile:
        type: string
        required: true
      ecr-repository-code:
        type: string
        required: true

jobs:

  build:
    runs-on: ubuntu-latest
    steps:

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install pipenv
        run: pip install pipenv

      - name: Install Requirements and Run Pytest
        env:
          JENKINS: true
          IS_JENKINS: true
          AWS_ACCESS_KEY_ID: ${{ secrets.BACKEND_FILE_AWS_ACCESS_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.BACKEND_FILE_AWS_SECRET_ACCESS_KEY }}
        run: |
          pipenv install --dev
          pipenv requirements --dev > requirements.txt
          pipenv run pip install -r manual-requirements.txt
          pipenv run pytest tests --junitxml=report.xml
          pipenv run junit2html report.xml report.html
          mkdir report-dir && mv report.html ./report-dir/report.html

      - name: Upload Test Reports to S3
        id: reports
        if: needs.init.outputs.skip-tests != 'true' && (success() || failure())
        uses: hawk-ai-aml/upload-s3-action@master
        with:
          aws_key_id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          aws_bucket: github-actions-static-html-2
          source_dir: ./report-dir
          destination_dir: ${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ inputs.profile == 'nab' && secrets.AWS_NAB_DEV_ECR_ACCESS_KEY_ID || secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
          aws-region: ${{ inputs.profile == 'nab' && 'us-east-1' || secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY && 'eu-central-1' }}
          aws-secret-access-key: ${{ inputs.profile == 'nab' && secrets.AWS_NAB_DEV_ECR_SECRET_ACCESS_KEY || secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ inputs.ecr-repository-code }}

      - name: Build and tag images
        env:
          MODULES: ${{ inputs.modules-string }}

        run: |
          echo $MODULES
          if [[ ${{ inputs.profile }} == 'nab' ]]; then
            REGISTRY=${{ inputs.ecr-repository-code }}.dkr.ecr.us-east-1.amazonaws.com
          else
            # even in prod-us-east, the ecr repository is the one in Frankfurt
            REGISTRY=${{ inputs.ecr-repository-code }}.dkr.ecr.eu-central-1.amazonaws.com
          fi
          for module in $MODULES
          do
            REPOSITORY_FOLDER=$(echo ${module} | sed 's/\_/\-/g')
            if [[ ${{ inputs.profile }} == 'nab' ]]; then
              REPOSITORY_FULL_NAME="$REGISTRY/hawk-ai-scores-${REPOSITORY_FOLDER}"
            else
              REPOSITORY_FULL_NAME="$REGISTRY/ai-scores-${REPOSITORY_FOLDER}"
            fi
            TAG=$(echo ${GITHUB_REF_NAME} | sed 's,\/,-,g; s,\#,,g')
            echo "$REPOSITORY_FULL_NAME is building..."
            DOCKER_BUILDKIT=1 docker build --build-arg SERVICE=${module} -t ${REPOSITORY_FULL_NAME}:${TAG} .
            docker push ${REPOSITORY_FULL_NAME}:${TAG}
          done

  update-overlays:
    if: ${{ inputs.updateKustomize == true }}
    needs: build
    runs-on: [ "self-hosted", "builder" ]
    strategy:
      # Avoid race condition issues with github
      max-parallel: 1
      matrix:
        overlay: ${{fromJson(inputs.environments)}}
        module: ${{fromJson(inputs.modules)}}

    steps:
      - name: Checkout Kustomize (GitHub)
        if: contains(inputs.kustomize-repository, 'github')
        uses: actions/checkout@v3
        with:
          repository: hawk-ai-aml/kustomize2.git
          token: ${{ secrets.TEST_TOKEN }}
          ref: master

      - name: Update Kustomize (GitHub)
        if: contains(inputs.kustomize-repository, 'github')
        run: |
          cd ${{ github.workspace }}/plattform/processing/features/${{ matrix.module }}/overlays/${{ matrix.overlay }}
          REPOSITORY_FOLDER=$(echo ${{ matrix.service }} | sed 's/\_/\-/g')
          REPOSITORY_FULL_NAME="${ECR_REGISTRY}/ai-scores-${REPOSITORY_FOLDER}"
          # kustomize edit set image $REPOSITORY_FULL_NAME:${{ env.HAWK_IMAGE_TAG }}
          kustomize edit set image $REPOSITORY_FULL_NAME:${{ github.ref_name }}
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@hawk.ai"
          git add .
          git commit -m "Change Tag"
          git push

      - name: Update Kustomize (Bitbucket)
        if: contains(inputs.kustomize-repository, 'bitbucket')
        shell: bash
        env:
          HAWK_IMAGE_NAME: ${{ inputs.ecr-repository-code }}.dkr.ecr.eu-central-1.amazonaws.com/ai-scores-${{ matrix.module }}
          NAB_IMAGE_NAME: ${{ inputs.ecr-repository-code }}.dkr.ecr.eu-central-1.amazonaws.com/hawk-ai-scores-${{ matrix.module }}
          KUSTOMIZE_SSH_KEY_FILE: /home/builder/.ssh/id_kustomize_private_key
          KUSTOMIZE_SSH_KEY: ${{ secrets.KUSTOMIZE_DEPLOY_PRIVATE_KEY }}
          KUSTOMIZE_PATH: plattform/processing/features/
          OVERLAY: ${{ matrix.overlay }}
        run: |
          # Prepare SSH
          mkdir -p $(dirname ${KUSTOMIZE_SSH_KEY_FILE})
          echo ${KUSTOMIZE_SSH_KEY} | base64 -d > ${KUSTOMIZE_SSH_KEY_FILE}
          chmod 600 ${KUSTOMIZE_SSH_KEY_FILE}
          export GIT_SSH_COMMAND="ssh -i ${KUSTOMIZE_SSH_KEY_FILE}"
          cat <<EOF >> ~/.ssh/known_hosts
          bitbucket.org ssh-rsa ${{ secrets.BITBUCKET_SSH_RSA }}
          EOF
          # End prepare SSH

          git clone ${{ inputs.kustomize-repository }}
          #either kustomize or kustomize2
          REPO_SLUG=$(echo ${{ inputs.kustomize-repository }} | cut -d "/" -f 2 | cut -d "." -f 1)
          TAG=$(echo ${GITHUB_REF_NAME} | sed 's,\/,-,g; s,\#,,g')


          cd ${REPO_SLUG}/${KUSTOMIZE_PATH}${{ matrix.module }}/overlays/${OVERLAY}
          echo ${HAWK_IMAGE_NAME}
          echo ${Nb_IMAGE_NAME}
          echo ${GITHUB_REF_NAME}
          if [[ ${{ inputs.profile }} == 'nab' ]]; then
            IMAGE_NAME=${NAB_IMAGE_NAME}
          else
            IMAGE_NAME=${HAWK_IMAGE_NAME}
          fi
          echo "Image Name = ${IMAGE_NAME}"
          kustomize edit set image ${IMAGE_NAME}:${TAG}
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@hawk.ai"
          git add .
          git commit -m "AUTOMATIC COMMIT: Update ${KUSTOMIZE_PATH}/overlays/${OVERLAY} for ${{ matrix.module }} to $TAG }}"
          git push
