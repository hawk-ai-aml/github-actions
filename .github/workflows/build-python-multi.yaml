name: build

on:
  workflow_call:
    inputs:
      updateKustomize:
        description: "Update kustomize overlays"
        type: boolean
        required: false
      skipTests:
        description: "Skip extended testing (unit and other tests), only build artifacts"
        type: boolean
        required: false
        default: false
      kustomizeOverlays:
        description: "The indicated overlays (dev, test, qa, prod)"
        type: string
        required: false
      ecr-prefix:
        type: string
        required: false
      caller-workflow-type:
        type: string
        required: true
      component:
        description: "Name of the repository"
        type: string
        required: false
      vulnerabilityCheck:
        description: "Conduct a vulnerability check using Lacework"
        type: boolean
        required: false
        default: false
      useSonarCloud:
        description: "Use SonarCloud for code quality checks"
        type: boolean
        required: false
        default: false

jobs:
  init:
    runs-on: [ "self-hosted", "small-builder" ]
    outputs:
      overlays: ${{ steps.init.outputs.overlays }}
      update-kustomize: ${{ steps.init.outputs.update-kustomize }}
      skip-tests: ${{ steps.init.outputs.skip-tests }}
      image-tag: ${{ steps.init.outputs.image-tag }}
      ecr-url: ${{ steps.init.outputs.ecr-url }}
      kustomize-modules: ${{ steps.init.outputs.kustomize-modules }}
      kustomize-modules-string: ${{ steps.init.outputs.kustomize-modules-string }}
      ecr-images: ${{ steps.init.outputs.ecr-images }}
      ecr-registry-code: ${{ steps.init.outputs.ecr-registry-code }}
      ecr-region: ${{ steps.init.outputs.ecr-region }}
      metadata: ${{ steps.init.outputs.metadata }}
      updated-modules: ${{ steps.detect-changes.outputs.updated-modules }}
      updated-modules-string: ${{ steps.detect-changes.outputs.updated-modules-string }}

    steps:
      - id: init
        name: Init Workflow
        uses: hawk-ai-aml/github-actions/workflow-init@master
        with:
          skip-tests: ${{ inputs.skipTests }}
          update-kustomize: ${{ inputs.updateKustomize }}
          overlays: ${{ inputs.kustomizeOverlays }}
          repository-name: hawk-ai-aml/${{ inputs.component }}
          repository-ref: ${{ env.GITHUB_REF_NAME }}
          repository-access-token: ${{ secrets.REPO_ACCESS_PAT }}

      - id: detect-changes
        name: Detect changes
        uses: hawk-ai-aml/github-actions/repository-detect-changes@master
        with:
          repository: hawk-ai-aml/${{ inputs.component }}
          repository-ref: ${{ env.GITHUB_REF_NAME }}
          repository-user: ${{ secrets.RECREATE_DEVELOP_GITHUB_USER }}
          repository-access-token: ${{ secrets.REPO_ACCESS_PAT }}
          modules-string: ${{ steps.init.outputs.kustomize-modules-string }}

  build:
    needs: init
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(needs.init.outputs.updated-modules) }}

    steps:
      - name: Checkout master
        uses: actions/checkout@v4
        with:
          ref: master
          # From SonarCloud Scan GitHub Action
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 1000

      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_REF_NAME }}
          # From SonarCloud Scan GitHub Action
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 1000

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ fromJson(needs.init.outputs.metadata).python-version }}

      - name: Install pipenv
        run: pip install pipenv==2023.6.18

      - name: Install Dependencies
        env:
          PY_UTILS_PAT: ${{ secrets.PY_UTILS_PAT }}
        run: |
          pipenv sync --dev
          pipenv requirements > pipenv-requirements.txt

          if [ -f manual-requirements.txt ]; then
            cat manual-requirements.txt pipenv-requirements.txt > requirements.txt
            pipenv run pip install -r manual-requirements.txt
          else
             cat pipenv-requirements.txt > requirements.txt
          fi
          pipenv run pip install pip-licenses

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CLOUD_STORAGE_SERVICE_ACCOUNT_KEY }}

      - name: Run Pytest on Module
        env:  
          JENKINS: true
          IS_JENKINS: true
          AWS_ACCESS_KEY_ID: ${{ secrets.BACKEND_FILE_AWS_ACCESS_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.BACKEND_FILE_AWS_SECRET_ACCESS_KEY }}
        run: |
          pipenv run tests_${{ matrix.module }} --junitxml=${{ matrix.module }}/report.xml tests/${{ matrix.module }} 
      
      - name: Generate Reports for Module
        if: inputs.skipTests != true && (success() || failure())
        working-directory: ${{ matrix.module }}
        run: |
          pipenv run junit2html report.xml report.html
          mkdir report-dir && mv report.html ./report-dir/report.html

      - name: Upload Test Reports to S3 for Module
        id: reports
        if: inputs.skipTests != true && (success() || failure())
        uses: hawk-ai-aml/github-actions/upload-to-s3@master
        with:
          module: ${{ matrix.module }}
          aws_access_key_id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          aws_bucket: github-actions-static-html-2
          source_dir: ${{ matrix.module }}/report-dir
          destination_dir: ${{ github.event.repository.name }}-${{ matrix.module }}-${{ github.run_id }}

      - name: SonarCloud Scan
        if: inputs.skipTests != true && (success() || failure()) && inputs.useSonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.python.version=${{ fromJson(needs.init.outputs.metadata).python-version }}
          projectBaseDir: ${{ matrix.module }}/
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Get ECR info
        id: ecr-info
        env:
          METADATA: ${{ needs.init.outputs.metadata }}
        run: |
          MODULE_ECR=$(echo ${METADATA} | jq -cr --arg MODULE ${{ matrix.module }} '.modules[$MODULE].ecr')
          echo "ECR=$MODULE_ECR"
          echo "module_ecr=$MODULE_ECR" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        if: ${{ github.workflow != 'pr' && steps.ecr-info.outputs.module_ecr != 'null' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.init.outputs.ecr-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        if: ${{ github.workflow != 'pr' && steps.ecr-info.outputs.module_ecr != 'null' }}
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ needs.init.outputs.ecr-registry-code }}

      - name: check if docker image tag exists in ECR
        id: check-tag
        if: ${{ github.workflow != 'pr' && steps.ecr-info.outputs.module_ecr != 'null' }}
        uses: hawk-ai-aml/github-actions/check-docker-tag-exists@master
        with:
          ecr-registry: ${{ steps.login-ecr.outputs.registry }}
          ecr-repository: ${{ steps.ecr-info.outputs.module_ecr }}
          image-tag: ${{ needs.init.outputs.image-tag }}

      - name: Build and tag images
        if: ${{ github.workflow != 'pr' && steps.ecr-info.outputs.module_ecr != 'null' && steps.check-tag.outputs.tag_already_exists != 'true' }}
        env:
          IMAGE_TAG: ${{ needs.init.outputs.image-tag }}
          ECR_PREFIX: ${{ inputs.ecr-prefix }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          PY_UTILS_PAT: ${{ secrets.PY_UTILS_PAT }}
          MODULE: ${{ matrix.module }}
        run: |
          REPOSITORY_FOLDER=$(echo ${MODULE} | sed 's/\_/\-/g')
          REPOSITORY_FULL_NAME="${ECR_REGISTRY}/${ECR_PREFIX}${REPOSITORY_FOLDER}"
          echo "${REPOSITORY_FULL_NAME} is building..."
          DOCKER_BUILDKIT=1 docker build --build-arg SERVICE=${MODULE} --build-arg PY_UTILS_PAT=${PY_UTILS_PAT} -t ${REPOSITORY_FULL_NAME}:${IMAGE_TAG} .
          docker push ${REPOSITORY_FULL_NAME}:${IMAGE_TAG}

  check-if-all-builds-passed:
    if: always()
    needs: [ build ]
    runs-on: [ "self-hosted", "small-builder" ]
    steps:
      - name: Check Build Job Failure
        if: ${{ needs.build.result == 'failure' }}
        run: exit 1

      - name: Check Build Job Success
        if: ${{ needs.build.result == 'success' }}
        run: exit 0

      - name: Slack notification for failed build status
        uses: hawk-ai-aml/github-actions/send-slack-notification@master
        if: failure()
        with:
          notify-pr-author: true
          slack-message: ":x: Your build failed. Please check the reason for it."
          slack-access-token: ${{ secrets.SLACK_RELEASE_BOT_ACCESS_TOKEN }}
          github-users-access-token: ${{ secrets.USER_GITHUB_ACCESS }}

  vulnerability-check-run:
    if: ${{ inputs.vulnerabilityCheck == true }}
    needs: [ init, build ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        image: ${{ fromJson(needs.init.outputs.ecr-images) }}

    steps:
      - name: Vulnerability check
        uses: hawk-ai-aml/github-actions/vulnerability-check@master
        with:
          ecr-region: ${{ needs.init.outputs.ecr-region }}
          ecr-registry-code: ${{ needs.init.outputs.ecr-registry-code }}
          image-name: ${{ matrix.image }}
          image-tag: ${{ needs.init.outputs.image-tag }}
          ecr-url: ${{ needs.init.outputs.ecr-url }}
          aws-access-key-id: ${{ secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
          java-offline-mode: ${{ env.LACEWORK_JAVA_OFFLINE_MODE }}
          lacework-account-name: ${{ secrets.LACEWORK_ACCOUNT_NAME }}
          lacework-access-token: ${{ secrets.LACEWORK_ACCESS_TOKEN }}

  update-overlays:
    needs: [ init, build ]
    if: ${{ needs.init.outputs.update-kustomize == 'true' && github.workflow != 'pr' }}
    runs-on: [ "self-hosted", "small-builder" ]

    steps:
      - name: Update kustomize overlay
        uses: hawk-ai-aml/github-actions/kustomize-overlay@master
        with:
          slack-access-token: ${{ secrets.SLACK_RELEASE_BOT_ACCESS_TOKEN }}
          github-users-access-token: ${{ secrets.USER_GITHUB_ACCESS }}
          overlays: ${{ needs.init.outputs.overlays }}
          modules: ${{ needs.init.outputs.updated-modules-string }}
          component-name: ${{ inputs.component }}
          component-tag: ${{ needs.init.outputs.image-tag }}
          kustomize-repo: hawk-ai-aml/kustomize.git
          kustomize-access-token: ${{ secrets.REPO_ACCESS_PAT }}
          ecr-region: ${{ needs.init.outputs.ecr-region }}
          ecr-registry-code: ${{ needs.init.outputs.ecr-registry-code }}
          metadata: ${{ needs.init.outputs.metadata }}
