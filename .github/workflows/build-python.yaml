name: build

on:
  workflow_call:
    inputs:
      updateKustomize:
        description: "Update kustomize overlays"
        type: boolean
        required: false
      skipTests:
        description: "Skip extended testing (unit and other tests), only build artifacts"
        type: boolean
        required: false
        default: false
      kustomizeOverlays:
        description: "The indicated overlays (dev, test, qa, prod)"
        type: string
        required: false
      component:
        description: "Name of the repository"
        type: string
        required: false
      vulnerabilityCheck:
        description: "Conduct a vulnerability check using Lacework"
        type: boolean
        required: false
        default: false

defaults:
  run:
    shell: bash -l -ET -eo pipefail {0}

jobs:
  init:
    runs-on: [ "self-hosted", "small-builder" ]
    outputs:
      overlays: ${{ steps.init.outputs.overlays }}
      update-kustomize: ${{ steps.init.outputs.update-kustomize }}
      skip-tests: ${{ steps.init.outputs.skip-tests }}
      image-tag: ${{ steps.init.outputs.image-tag }}
      ecr-url: ${{ steps.init.outputs.ecr-url }}
      kustomize-modules: ${{ steps.init.outputs.kustomize-modules }}
      kustomize-modules-string: ${{ steps.init.outputs.kustomize-modules-string }}
      ecr-images: ${{ steps.init.outputs.ecr-images }}
      ecr-registry-code: ${{ steps.init.outputs.ecr-registry-code }}
      ecr-region: ${{ steps.init.outputs.ecr-region }}
      metadata: ${{ steps.init.outputs.metadata }}

    steps:
      - id: init
        name: Init Workflow
        uses: hawk-ai-aml/github-actions/workflow-init@master
        with:
          skip-tests: ${{ inputs.skipTests }}
          update-kustomize: ${{ inputs.updateKustomize }}
          overlays: ${{ inputs.kustomizeOverlays }}
          repository-name: hawk-ai-aml/${{ inputs.component }}
          repository-ref: ${{ env.GITHUB_REF_NAME }}
          repository-access-token: ${{ secrets.REPO_ACCESS_PAT }}

  build:
    needs: init
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ fromJson(needs.init.outputs.metadata).python-version }}

      - name: Install pipenv
        run: pip install pipenv==2023.6.18

      - name: Run Pytest
        env:
          SCHEMA_REGISTRY_URL: "http://internal-aed0c439480b011ea821006d55bdfaa3-2040159056.eu-central-1.elb.amazonaws.com:8081"
          KAFKA_SERVICE: "kafka-service:9092"
          KAFKA_CONSUMER_THREADS: 1
          KAFKA_AUTO_OFFSET_RESET: "latest"
          FILES_STORAGE: "files.dev.aml-ai.net"
          APP_CONFIG_YAML_PATH: "tests"
          PY_UTILS_PAT: ${{ secrets.PY_UTILS_PAT}}
        run: |
          pipenv install --dev
          pipenv lock --keep-outdated > pipenv-requirements.txt
          pipenv requirements > requirements.txt
          pipenv run tests --junitxml=report.xml
          pipenv run junit2html report.xml report.html
          mkdir report-dir && mv report.html ./report-dir/report.html

#      - name: Upload Reports to S3
#        id: reports
#        if: needs.init.outputs.skip-tests != 'true' && (success() || failure())
#        uses: hawk-ai-aml/github-actions/upload-to-s3@master
#        with:
#          aws_access_key_id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
#          aws_secret_access_key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
#          aws_bucket: github-actions-static-html-2
#          source_dir: ./report-dir
#          destination_dir: ${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Configure AWS credentials
        if: ${{ github.workflow != 'pr' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.init.outputs.ecr-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        if: ${{ github.workflow != 'pr' }}
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ needs.init.outputs.ecr-registry-code }}

      - name: Build image
        if: ${{ github.workflow != 'pr' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ fromJson(needs.init.outputs.metadata).ecr.repository }}
          PY_UTILS_PAT: ${{ secrets.PY_UTILS_PAT}}
        run: |
          DOCKER_BUILDKIT=1 docker build --build-arg PY_UTILS_PAT=${PY_UTILS_PAT} -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${{ needs.init.outputs.image-tag }} .

      - name: Push Image
        id: push-image
        if: ${{ github.workflow != 'pr' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ fromJson(needs.init.outputs.metadata).ecr.repository }}
        run: |
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${{ needs.init.outputs.image-tag }}

  vulnerability-check-run:
    if: ${{ inputs.vulnerabilityCheck == true }}
    needs: [ init, build ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        image: ${{ fromJson(needs.init.outputs.ecr-images) }}

    steps:
      - name: Vulnerability check
        uses: hawk-ai-aml/github-actions/vulnerability-check@master
        with:
          ecr-region: ${{ needs.init.outputs.ecr-region }}
          ecr-registry-code: ${{ needs.init.outputs.ecr-registry-code }}
          image-name: ${{ matrix.image }}
          image-tag: ${{ needs.init.outputs.image-tag }}
          ecr-url: ${{ needs.init.outputs.ecr-url }}
          aws-access-key-id: ${{ secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
          java-offline-mode: ${{ env.LACEWORK_JAVA_OFFLINE_MODE }}
          lacework-account-name: ${{ secrets.LACEWORK_ACCOUNT_NAME }}
          lacework-access-token: ${{ secrets.LACEWORK_ACCESS_TOKEN }}

  update-overlays:
    needs: [ init, build ]
    if: ${{ needs.init.outputs.update-kustomize == 'true' && github.workflow != 'pr' }}
    runs-on: [ "self-hosted", "small-builder" ]

    steps:
      - name: Update kustomize overlay
        uses: hawk-ai-aml/github-actions/kustomize-overlay@master
        with:
          overlays: ${{ needs.init.outputs.overlays }}
          modules: ${{ needs.init.outputs.kustomize-modules-string }}
          component-name: ${{ inputs.component }}
          component-tag: ${{ needs.init.outputs.image-tag }}
          kustomize-repo: hawk-ai-aml/kustomize.git
          kustomize-access-token: ${{ secrets.REPO_ACCESS_PAT }}
          ecr-region: ${{ needs.init.outputs.ecr-region }}
          ecr-registry-code: ${{ needs.init.outputs.ecr-registry-code }}
          metadata: ${{ needs.init.outputs.metadata }}
