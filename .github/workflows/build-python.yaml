name: build

on:
  workflow_call:
    inputs:
      updateKustomize:
        description: "Update kustomize overlays"
        type: boolean
        required: false
      skipTests:
        description: "Skip extended testing (unit and other tests), only build artifacts"
        type: boolean
        required: false
        default: false
      kustomizeOverlays:
        description: "Overlays to update"
        type: string
        required: false
      component:
        type: string
        required: false
      profile:
        type: string
        required: false

jobs:
  init:
    runs-on: [ "self-hosted", "builder" ]
    outputs:
      overlays: ${{ steps.init.outputs.overlays }}
      metadata: ${{ steps.init.outputs.metadata }}
      update-kustomize: ${{ steps.init.outputs.update-kustomize }}
      skip-tests: ${{ steps.init.outputs.skip-tests }}
      parameters: ${{ steps.init.outputs.parameters }}
    steps:
      - id: init
        name: Init Workflow
        uses: hawk-ai-aml/github-actions/workflow-init@master
        with:
          profile: ${{ inputs.profile }}
          component: ${{ inputs.component }}
          update-kustomize: ${{ inputs.updateKustomize }}
          overlays: ${{ inputs.kustomizeOverlays }}
          skip-tests: ${{ inputs.skipTests }}

  build:
    needs: [ init ]
    runs-on: ["self-hosted", "builder"]
    steps:
      - id: init
        name: Init Job
        uses: hawk-ai-aml/github-actions/job-init@master

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: actions/checkout@v3
      - run: ls . && cat Â§AGENT_TOOLSDIRECTORY

      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Check Python
        run: python --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ inputs.profile == 'nab' && secrets.AWS_NAB_DEV_ECR_ACCESS_KEY_ID || secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ inputs.profile == 'nab' && secrets.AWS_NAB_DEV_ECR_SECRET_ACCESS_KEY || secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ fromJson(needs.init.outputs.metadata).ecr.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ fromJson(needs.init.outputs.metadata).ecr.registry }}

      - name: Build image
        env:
          ARTIFACTORY_CONTEXT_URL: ${{ secrets.ARTIFACTORY_CONTEXT_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ fromJson(needs.init.outputs.metadata).ecr.repository }}
        run: |
          ./gradlew build -Dskip.tests=true -x test
          ./gradlew jibDockerBuild -DIMAGE_NAME="${ECR_REGISTRY}/${ECR_REPOSITORY}" -DTAG_COMMIT=${{ env.HAWK_IMAGE_TAG }}

      - name: Push Image
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ fromJson(needs.init.outputs.metadata).ecr.repository }}
        run: |
          export DOCKER_CLI_EXPERIMENTAL=enabled

          set +e
          docker manifest inspect ${ECR_REGISTRY}/${ECR_REPOSITORY}:${{ env.HAWK_IMAGE_TAG }} 2>&1> /dev/null
          inspect_code=$?
          set -e

          if [[ "${inspect_code}" != 0 ]]; then
            docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${{ env.HAWK_IMAGE_TAG }}
          fi
#
#  update-overlays:
#    needs: [ init, build ]
#    if: ${{ needs.init.outputs.update-kustomize == 'true' }}
#    runs-on: [ "self-hosted", "builder" ]
#    strategy:
#      # Avoid race condition issues with github
#      max-parallel: 1
#      matrix:
#        overlay: ${{fromJson(needs.init.outputs.overlays)}}
#
##    steps:
#      - id: init
#        name: Init Job
#        uses: hawk-ai-aml/job-init@master
#
#      - id: udpate-overlay-github
#        name: Update kustomize overlay
#        if: fromJson(needs.init.outputs.parameters).kustomize == 'github' || fromJson(needs.init.outputs.parameters).kustomize == 'github-fake'
#        uses: hawk-ai-aml/github-actions/kustomize-overlay@master
#        with:
#          component-metadata: ${{ needs.init.outputs.metadata }}
#          component-overlay: ${{ matrix.overlay }}
#          component-tag: ${{ env.HAWK_IMAGE_TAG }}
#          kustomize-repo: ${{ fromJson(needs.init.outputs.parameters).kustomize == 'github-fake' && 'hawk-ai-aml/kustomize2.git' || 'hawk-ai-aml/kustomize.git' }}
#          kustomize-access-token: ${{ secrets.REPO_ACCESS_PAT }}
#          aws-access-key-id: ${{ inputs.profile == 'nab' && secrets.AWS_NAB_DEV_ECR_ACCESS_KEY_ID || secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ inputs.profile == 'nab' && secrets.AWS_NAB_DEV_ECR_SECRET_ACCESS_KEY || secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
#
#      - id: udpate-overlay-bitbucket
#        name: Update kustomize overlay
#        if: fromJson(needs.init.outputs.parameters).kustomize == 'bitbucket' || fromJson(needs.init.outputs.parameters).kustomize == 'bitbucket-fake'
#        uses: hawk-ai-aml/github-actions/kustomize-overlay-ssh@master
#        with:
#          component-metadata: ${{ needs.init.outputs.metadata }}
#          component-overlay: ${{ matrix.overlay }}
#          component-tag: ${{ env.HAWK_IMAGE_TAG }}
#          kustomize-repo: ${{ fromJson(needs.init.outputs.parameters).kustomize == 'bitbucket-fake' && 'git@bitbucket.org:hawkai/kustomize2.git' || 'git@bitbucket.org:hawkai/kustomize.git' }}
#          kustomize-ssh-key: ${{ secrets.KUSTOMIZE_DEPLOY_PRIVATE_KEY }}
#          aws-access-key-id: ${{ inputs.profile == 'nab' && secrets.AWS_NAB_DEV_ECR_ACCESS_KEY_ID || secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ inputs.profile == 'nab' && secrets.AWS_NAB_DEV_ECR_SECRET_ACCESS_KEY || secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
