name: build

on:
  workflow_call:
    inputs:
      updateKustomize:
        description: "Update kustomize overlays"
        type: boolean
        required: false
      kustomizeOverlays:
        description: "Overlays to update"
        type: string
        required: false
      component:
        type: string
        required: false
      deleteCache:
        type: boolean
        required: false
      vulnerabilityCheck:
        description: "Conduct a vulnerability check using Lacework"
        type: boolean
        required: false
        default: false

defaults:
  run:
    shell: bash -l -ET -eo pipefail {0}

jobs:
  init:
    runs-on: [ "self-hosted", "small-builder" ]
    outputs:
      overlays: ${{ steps.init.outputs.overlays }}
      metadata: ${{ steps.init.outputs.metadata }}
      update-kustomize: ${{ steps.init.outputs.update-kustomize }}
      image-tag: ${{ steps.init.outputs.image-tag }}
      kustomize-modules: ${{ steps.init.outputs.kustomize-modules }}
      kustomize-modules-string: ${{ steps.init.outputs.kustomize-modules-string }}
      ecr-url: ${{ steps.init.outputs.ecr-url }}
      ecr-registry-code: ${{ steps.init.outputs.ecr-registry-code }}
      ecr-region: ${{ steps.init.outputs.ecr-region }}
      ecr-images: ${{ steps.init.outputs.ecr-images }}

    steps:
      - id: init
        name: Init Workflow
        uses: hawk-ai-aml/github-actions/workflow-init@master
        with:
          update-kustomize: ${{ inputs.updateKustomize }}
          overlays: ${{ inputs.kustomizeOverlays }}
          repository-name: hawk-ai-aml/${{ inputs.component }}
          repository-ref: ${{ env.GITHUB_REF_NAME }}
          repository-access-token: ${{ secrets.REPO_ACCESS_PAT }}

  setup-and-lint:
    needs: [ init ]
    runs-on: [ "self-hosted", "small-builder" ]
    outputs:
      node-module-cache-key: ${{ steps.cache-key.outputs.node-module-cache-key }}
      yarn-cache-key: ${{ steps.cache-key.outputs.yarn-cache-key }}
      yarn-dir-path: ${{ steps.yarn-cache-path.outputs.path }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Get Yarn cache directory
        id: yarn-cache-path
        run: echo "path=$(yarn cache dir)"  >> $GITHUB_OUTPUT

      - name: Generate cache key
        id: cache-key
        run: |
          echo "yarn-cache-key=${{ runner.os }}-yarn" >> $GITHUB_OUTPUT
          echo "node-module-cache-key=${{ runner.os }}-module-${{ hashFiles('**/yarn.lock') }}" >> $GITHUB_OUTPUT

      - name: Use Yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-path.outputs.path }}
          key: ${{ steps.cache-key.outputs.yarn-cache-key }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Install Yarn
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: |
          set -eux
          npm install -g yarn

      - name: Node module cache
        uses: actions/cache@v3
        id: module-cache
        with:
          path: |
            **/node_modules
          key: ${{ steps.cache-key.outputs.node-module-cache-key }}
          restore-keys: ${{ runner.os }}-module-

      - name: Install node modules
        if: steps.module-cache.outputs.cache-hit != 'true'
        run: yarn run yarn:install

      - name: Build license report
        run: ./node_modules/license-checker/bin/license-checker > licenseReport.txt

      - name: Lint check
        run: yarn run prettier:check


  tests:
    needs: [ init, setup-and-lint ]
    runs-on: [ "self-hosted", "builder" ]

    strategy:
      matrix:
        shard: [1, 2, 3, 4]
    steps:
      - name: Checkout master
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 1000

      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_REF_NAME }}
          fetch-depth: 1000

      - name: Use Yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ needs.setup-and-lint.outputs.yarn-dir-path }}
          key: ${{ needs.setup-and-lint.outputs.yarn-cache-key }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Install Yarn
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: |
          set -eux
          npm install -g yarn

      - name: Node modules cache
        uses: actions/cache@v3
        id: module-cache
        with:
          path: |
            **/node_modules
          key: ${{ needs.setup-and-lint.outputs.node-module-cache-key }}
          restore-keys: ${{ runner.os }}-module-

      - name: Install node modules
        if: steps.module-cache.outputs.cache-hit != 'true'
        run: yarn run yarn:install

      - name: Yarn test
        run: yarn run test:ci --shard=${{ matrix.shard }}/${{ strategy.job-total }}

      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarqube-scan-action@v4.2.1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

  build:
    needs: [ init, setup-and-lint, tests ]
    runs-on: [ "self-hosted", "frontend-builder" ]

    steps:
      - uses: actions/checkout@v4

      - name: Yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ needs.setup-and-lint.outputs.yarn-dir-path }}
          key: ${{ needs.setup-and-lint.outputs.yarn-cache-key }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Install Yarn
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: |
          set -eux
          npm install -g yarn

      - name: Node module cache
        uses: actions/cache@v3
        id: module-cache
        with:
          path: |
            **/node_modules
          key: ${{ needs.setup-and-lint.outputs.node-module-cache-key }}
          restore-keys: ${{ runner.os }}-module-

      - name: Install node modules
        if: steps.module-cache.outputs.cache-hit != 'true'
        run: yarn run yarn:install

      - name: Yarn build
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: yarn run build

      - name: Configure AWS credentials
        if: ${{ github.workflow != 'pr' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.init.outputs.ecr-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        if: ${{ github.workflow != 'pr' }}
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ needs.init.outputs.ecr-registry-code }}

      - name: Build image
        if: ${{ github.workflow != 'pr' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ fromJson(needs.init.outputs.metadata).ecr.repository }}
        run: |
          docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${{ needs.init.outputs.image-tag }} .

      - name: Push Image
        if: ${{ github.workflow != 'pr' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ fromJson(needs.init.outputs.metadata).ecr.repository }}
        run: |
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${{ needs.init.outputs.image-tag }}

      - name: Slack notification for failed build status
        uses: hawk-ai-aml/github-actions/send-slack-notification@master
        if: failure()
        with:
          notify-pr-author: true
          slack-message: ":x: Your build failed. Please check the reason for it."
          slack-access-token: ${{ secrets.SLACK_RELEASE_BOT_ACCESS_TOKEN }}
          github-users-access-token: ${{ secrets.USER_GITHUB_ACCESS }}

  vulnerability-check-run:
    if: ${{ inputs.vulnerabilityCheck == true }}
    needs: [ init, build ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        image: ${{ fromJson(needs.init.outputs.ecr-images) }}

    steps:
      - name: Vulnerability check
        uses: hawk-ai-aml/github-actions/vulnerability-check@master
        with:
          ecr-region: ${{ needs.init.outputs.ecr-region }}
          ecr-registry-code: ${{ needs.init.outputs.ecr-registry-code }}
          image-name: ${{ matrix.image }}
          image-tag: ${{ needs.init.outputs.image-tag }}
          ecr-url: ${{ needs.init.outputs.ecr-url }}
          aws-access-key-id: ${{ secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
          java-offline-mode: ${{ env.LACEWORK_JAVA_OFFLINE_MODE }}
          lacework-account-name: ${{ secrets.LACEWORK_ACCOUNT_NAME }}
          lacework-access-token: ${{ secrets.LACEWORK_ACCESS_TOKEN }}

  update-overlays:
    needs: [ init, setup-and-lint, tests, build ]
    if: ${{ needs.init.outputs.update-kustomize == 'true' && github.workflow != 'pr' }}
    runs-on: [ "self-hosted", "small-builder" ]

    steps:
      - name: Update kustomize overlay
        uses: hawk-ai-aml/github-actions/kustomize-overlay@master
        with:
          slack-access-token: ${{ secrets.SLACK_RELEASE_BOT_ACCESS_TOKEN }}
          github-users-access-token: ${{ secrets.USER_GITHUB_ACCESS }}
          overlays: ${{ needs.init.outputs.overlays }}
          modules: ${{ needs.init.outputs.kustomize-modules-string }}
          component-name: ${{ inputs.component }}
          component-tag: ${{ needs.init.outputs.image-tag }}
          kustomize-repo: hawk-ai-aml/kustomize.git
          kustomize-access-token: ${{ secrets.REPO_ACCESS_PAT }}
          ecr-region: ${{ needs.init.outputs.ecr-region }}
          ecr-registry-code: ${{ needs.init.outputs.ecr-registry-code }}
          metadata: ${{ needs.init.outputs.metadata }}

  clean-up:
    needs: [ init, setup-and-lint, tests, build ]
    runs-on: [ "self-hosted", "small-builder" ]

    steps:
      - uses: actions/checkout@v4

      - name: Clean cache
        if: ${{ inputs.deleteCache == true }}
        env:
          USER: ${{ secrets.RECREATE_DEVELOP_GITHUB_USER }}
          TOKEN: ${{ secrets.RECREATE_DEVELOP_GITHUB_TOKEN }}
          REPOSITORY: ${{ inputs.component }}
          CACHE_KEY: ${{ needs.setup-and-lint.outputs.node-module-cache-key }}
        run: |
          chmod +x ./lib/delete-cache.sh
          ./lib/delete-cache.sh
        shell: bash
