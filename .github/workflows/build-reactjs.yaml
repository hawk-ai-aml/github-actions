name: build

on:
  workflow_call:
    inputs:
      updateKustomize:
        description: "Update kustomize overlays"
        type: boolean
        required: false
      kustomizeOverlays:
        description: "Overlays to update"
        type: string
        required: false
      component:
        type: string
        required: false
      profile:
        type: string
        required: false
      useCacheResults:
        type: boolean
        required: false
      deleteCache:
        type: boolean
        required: false
      vulnerabilityCheck:
        description: "Conduct a vulnerability check using Lacework"
        type: boolean
        required: false
        default: false

defaults:
  run:
    shell: bash -l -ET -eo pipefail {0}

jobs:
  init:
    runs-on: [ "self-hosted", "builder" ]
    outputs:
      overlays: ${{ steps.init.outputs.overlays }}
      metadata: ${{ steps.init.outputs.metadata }}
      update-kustomize: ${{ steps.init.outputs.update-kustomize }}
      skip-tests: ${{ steps.init.outputs.skip-tests }}
      parameters: ${{ steps.init.outputs.parameters }}
      hawk-image-tag: ${{ env.HAWK_IMAGE_TAG }}
    steps:
      - id: init
        name: Init Workflow
        uses: hawk-ai-aml/github-actions/workflow-init@master
        with:
          slack-notification-webhook: ${{ secrets.CICD_MIGRATION_SLACK_WEBHOOK_URL }}
          profile: ${{ inputs.profile }}
          component: ${{ inputs.component }}
          update-kustomize: ${{ inputs.updateKustomize }}
          overlays: ${{ inputs.kustomizeOverlays }}
          vulnerabilityCheck: ${{ inputs.vulnerabilityCheck }}

  setup-and-lint:
    needs: [ init ]
    runs-on: [ "self-hosted", "builder" ]
    outputs:
      releaseVersion: ${{ steps.release-version.outputs.releaseVersion }}
      buildResultCached: ${{ steps.cache-build-results-flag.outputs.buildResultCached }}

    steps:
      - id: init
        name: Init Job
        uses: hawk-ai-aml/github-actions/job-init@master
        with:
          slack-notification-webhook: ${{ secrets.CICD_MIGRATION_SLACK_WEBHOOK_URL }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: actions/checkout@v3

      - name: Cache Node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: ./node_modules/
          key: ${{ runner.os }}-node-modules-
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Set up Node
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Get current release version
        id: release-version
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "releaseVersion=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
          echo "current release: ${{ env.RELEASE_VERSION }}"

      - name: Check build results
        id: cache-build-results
        if: ${{ inputs.useCacheResults == true }}
        uses: actions/cache@v3
        with:
          path: ./build/
          key: ${{ runner.os }}-frontend-build-${{ env.RELEASE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-frontend-build-${{ env.RELEASE_VERSION }}

      - name: Store build results flag
        id: cache-build-results-flag
        run: |
          echo "buildResultCached=${{ steps.cache-build-results.outputs.cache-hit }}" >> $GITHUB_OUTPUT

      - name: Npm install
        if: steps.cache-build-results.outputs.cache-hit != 'true'
        uses: jaid/action-npm-install@v1.2.1

      - name: Install Yarn
        if: steps.cache-build-results.outputs.cache-hit != 'true'
        run: npm install -g yarn

      - name: Build license report
        if: steps.cache-build-results.outputs.cache-hit != 'true'
        run: ./node_modules/license-checker/bin/license-checker > licenseReport.txt

      - name: Lint check
        if: steps.cache-build-results.outputs.cache-hit != 'true'
        run: yarn run prettier:check


  tests:
    needs: [ init, setup-and-lint ]
    runs-on: [ "self-hosted", "builder" ]

    strategy:
      matrix:
        shard: [1, 2, 3, 4]
    steps:
      - uses: actions/checkout@v3

      - name: Cache Node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: ./node_modules/
          key: ${{ runner.os }}-node-modules-
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install packages
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn run yarn:install

      - name: Check
        run: |
          echo "buildResultCached: ${{ needs.setup-and-lint.outputs.buildResultCached }}"

      - name: Yarn test
        if: needs.setup-and-lint.outputs.buildResultCached != 'true'
        run: yarn run test:ci --shard=${{ matrix.shard }}/${{ strategy.job-total }}


  build:
    needs: [ init, setup-and-lint, tests ]
    runs-on: [ "self-hosted", "builder" ]
    steps:
      - id: init
        name: Init Job
        uses: hawk-ai-aml/github-actions/job-init@master
        with:
          slack-notification-webhook: ${{ secrets.CICD_MIGRATION_SLACK_WEBHOOK_URL }}

      - uses: actions/checkout@v3

      - name: Cache build results
        id: cache-build-results
        if: ${{ inputs.useCacheResults == true }}
        uses: actions/cache@v3
        with:
          path: ./build/
          key: ${{ runner.os }}-frontend-build-${{ needs.setup-and-lint.outputs.releaseVersion }}
          restore-keys: |
            ${{ runner.os }}-frontend-build-${{ needs.setup-and-lint.outputs.releaseVersion }}

      - name: Cache Node modules
        id: cache-node-modules
        if: steps.cache-build-results.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: ./node_modules/
          key: ${{ runner.os }}-node-modules-
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install packages
        if: (inputs.useCacheResults == true && steps.cache-build-results.outputs.cache-hit != 'true') || (inputs.useCacheResults != true && steps.cache-node-modules.outputs.cache-hit != 'true')
        run: yarn run yarn:install

      - name: Yarn build
        if: steps.cache-build-results.outputs.cache-hit != 'true'
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: yarn run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ fromJson(needs.init.outputs.metadata).ecr.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ fromJson(needs.init.outputs.metadata).ecr.registry }}

      - name: Build image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ fromJson(needs.init.outputs.metadata).ecr.repository }}
        run: |
          docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${{ needs.init.outputs.hawk-image-tag }} .

      - name: Push Image
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ fromJson(needs.init.outputs.metadata).ecr.repository }}
        run: |
          hawk.push-docker-image ${ECR_REGISTRY}/${ECR_REPOSITORY}:${{ needs.init.outputs.hawk-image-tag }}

  vulnerability-check-run:
    if: ${{ (inputs.profile == 'hawk') && (inputs.vulnerabilityCheck == true) }}
    needs: [ init, build ]
    runs-on: ubuntu-latest
    steps:
      - id: init
        name: Init Job
        uses: hawk-ai-aml/github-actions/job-init@master
        with:
          slack-notification-webhook: ${{ secrets.CICD_MIGRATION_SLACK_WEBHOOK_URL }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ fromJson(needs.init.outputs.metadata).ecr.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ fromJson(needs.init.outputs.metadata).ecr.registry }}

      - name: Retrieve AWS ECR login password for Lacework
        id: ecrLoginPassword
        run: echo "loginPassword=$(aws ecr get-login-password --region eu-central-1)" >> $GITHUB_OUTPUT

      - uses: lacework/lw-scanner-action@v1.3.1
        name: Scan container image for vulnerabilities using Lacework
        env:
          JAVA_OFFLINE_MODE: ${{ env.LACEWORK_JAVA_OFFLINE_MODE }}
        with:
          LW_ACCOUNT_NAME: ${{ secrets.LACEWORK_ACCOUNT_NAME }}
          LW_ACCESS_TOKEN: ${{ secrets.LACEWORK_ACCESS_TOKEN }}
          IMAGE_NAME: ${{ steps.login-ecr.outputs.registry }}/${{ fromJson(needs.init.outputs.metadata).ecr.repository }}
          IMAGE_TAG: ${{ env.HAWK_IMAGE_TAG }}
          SAVE_RESULTS_IN_LACEWORK: true
          ADDITIONAL_PARAMETERS: --docker-username AWS --docker-server https://860641649575.dkr.ecr.eu-central-1.amazonaws.com --docker-password ${{ steps.ecrLoginPassword.outputs.loginPassword }}

  update-overlays:
    needs: [ init, setup-and-lint, tests, build ]
    if: ${{ needs.init.outputs.update-kustomize == 'true' }}
    runs-on: [ "self-hosted", "builder" ]
    strategy:
      max-parallel: 1
      matrix:
        overlay: ${{fromJson(needs.init.outputs.overlays)}}

    steps:
      - id: init
        name: Init Job
        uses: hawk-ai-aml/github-actions/job-init@master
        with:
          slack-notification-webhook: ${{ secrets.CICD_MIGRATION_SLACK_WEBHOOK_URL }}

      - id: update-overlay-github
        name: Update kustomize overlay
        if: fromJson(needs.init.outputs.parameters).kustomize == 'github' || fromJson(needs.init.outputs.parameters).kustomize == 'github-fake'
        uses: hawk-ai-aml/github-actions/kustomize-overlay@master
        with:
          component-name: ${{ inputs.component }}
          component-metadata: ${{ needs.init.outputs.metadata }}
          component-overlay: ${{ matrix.overlay }}
          component-tag: ${{ needs.init.outputs.hawk-image-tag }}
          kustomize-repo: ${{ fromJson(needs.init.outputs.parameters).kustomize == 'github-fake' && 'hawk-ai-aml/kustomize2.git' || 'hawk-ai-aml/kustomize.git' }}
          kustomize-access-token: ${{ secrets.REPO_ACCESS_PAT }}

      - id: update-overlay-bitbucket
        name: Update kustomize overlay
        if: fromJson(needs.init.outputs.parameters).kustomize == 'bitbucket' || fromJson(needs.init.outputs.parameters).kustomize == 'bitbucket-fake'
        uses: hawk-ai-aml/github-actions/kustomize-overlay-ssh@master
        with:
          component-name: ${{ inputs.component }}
          component-metadata: ${{ needs.init.outputs.metadata }}
          component-overlay: ${{ matrix.overlay }}
          component-tag: ${{ needs.init.outputs.hawk-image-tag }}
          kustomize-repo: ${{ fromJson(needs.init.outputs.parameters).kustomize == 'bitbucket-fake' && 'git@bitbucket.org:hawkai/kustomize2.git' || 'git@bitbucket.org:hawkai/kustomize.git' }}
          kustomize-ssh-key: ${{ secrets.KUSTOMIZE_DEPLOY_PRIVATE_KEY }}


  clean-up:
    needs: [ init, setup-and-lint, build, tests, update-overlays ]
    runs-on: [ "self-hosted", "builder" ]

    steps:
      - uses: actions/checkout@v3

      - name: Clean cache
        if: ${{ inputs.deleteCache == true }}
        env:
          USER: ${{ secrets.RECREATE_DEVELOP_GITHUB_USER }}
          TOKEN: ${{ secrets.RECREATE_DEVELOP_GITHUB_TOKEN }}
          REPOSITORY: ${{ inputs.component }}
          CACHE_KEY: ${{ runner.os }}-frontend-build-${{ needs.setup-and-lint.outputs.releaseVersion }}
        run: |
          chmod +x ./lib/delete-cache.sh
          ./lib/delete-cache.sh
        shell: bash
