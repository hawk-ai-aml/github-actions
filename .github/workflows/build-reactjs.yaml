name: build

on:
  workflow_call:
    inputs:
      updateKustomize:
        description: "Update kustomize overlays"
        type: boolean
        required: false
      kustomizeOverlays:
        description: "Overlays to update"
        type: string
        required: false
      component:
        type: string
        required: false
      useCacheResults:
        type: boolean
        required: false
      deleteCache:
        type: boolean
        required: false
      vulnerabilityCheck:
        description: "Conduct a vulnerability check using Lacework"
        type: boolean
        required: false
        default: false

defaults:
  run:
    shell: bash -l -ET -eo pipefail {0}

jobs:
  init:
    runs-on: [ "self-hosted", "frontend-builder" ]
    outputs:
      overlays: ${{ steps.init.outputs.overlays }}
      metadata: ${{ steps.init.outputs.metadata }}
      update-kustomize: ${{ steps.init.outputs.update-kustomize }}
      image-tag: ${{ steps.init.outputs.image-tag }}
      kustomize-modules: ${{ steps.init.outputs.kustomize-modules }}
      ecr-url: ${{ steps.init.outputs.ecr-url }}
      ecr-registry-code: ${{ steps.init.outputs.ecr-registry-code }}
      ecr-region: ${{ steps.init.outputs.ecr-region }}
      ecr-images: ${{ steps.init.outputs.ecr-images }}

    steps:
      - id: init
        name: Init Workflow
        uses: hawk-ai-aml/github-actions/workflow-init@master
        with:
          update-kustomize: ${{ inputs.updateKustomize }}
          overlays: ${{ inputs.kustomizeOverlays }}
          repository-name: hawk-ai-aml/${{ inputs.component }}
          repository-ref: ${{ env.GITHUB_REF_NAME }}
          repository-access-token: ${{ secrets.REPO_ACCESS_PAT }}

  setup-and-lint:
    needs: [ init ]
    runs-on: [ "self-hosted", "frontend-builder" ]
    outputs:
      releaseVersion: ${{ steps.release-version.outputs.releaseVersion }}
      buildResultCached: ${{ steps.cache-build-results-flag.outputs.buildResultCached }}

    steps:
      - uses: actions/checkout@v3

      - name: Cache Node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: ./node_modules/
          key: ${{ runner.os }}-node-modules-
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Set up Node
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Get current release version
        id: release-version
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "releaseVersion=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
          echo "current release: ${{ env.RELEASE_VERSION }}"

      - name: Check build results
        id: cache-build-results
        if: ${{ inputs.useCacheResults == true }}
        uses: actions/cache@v3
        with:
          path: ./build/
          key: ${{ runner.os }}-frontend-build-${{ env.RELEASE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-frontend-build-${{ env.RELEASE_VERSION }}

      - name: Store build results flag
        id: cache-build-results-flag
        run: |
          echo "buildResultCached=${{ steps.cache-build-results.outputs.cache-hit }}" >> $GITHUB_OUTPUT

      - name: Install Yarn
        if: steps.cache-build-results.outputs.cache-hit != 'true'
        run: npm install -g yarn

      - name: Build license report
        if: steps.cache-build-results.outputs.cache-hit != 'true'
        run: ./node_modules/license-checker/bin/license-checker > licenseReport.txt

      - name: Lint check
        if: steps.cache-build-results.outputs.cache-hit != 'true'
        run: yarn run prettier:check


  tests:
    needs: [ init, setup-and-lint ]
    runs-on: [ "self-hosted", "frontend-builder" ]

    strategy:
      matrix:
        shard: [1, 2, 3, 4]
    steps:
      - uses: actions/checkout@v3

      - name: Cache Node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: ./node_modules/
          key: ${{ runner.os }}-node-modules-
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install packages
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn run yarn:install

      - name: Check
        run: |
          echo "buildResultCached: ${{ needs.setup-and-lint.outputs.buildResultCached }}"

      - name: Yarn test
        if: needs.setup-and-lint.outputs.buildResultCached != 'true'
        run: yarn run test:ci --shard=${{ matrix.shard }}/${{ strategy.job-total }}


  build:
    needs: [ init, setup-and-lint, tests ]
    runs-on: [ "self-hosted", "frontend-builder" ]

    steps:
      - uses: actions/checkout@v3

      - name: Cache build results
        id: cache-build-results
        if: ${{ inputs.useCacheResults == true }}
        uses: actions/cache@v3
        with:
          path: ./build/
          key: ${{ runner.os }}-frontend-build-${{ needs.setup-and-lint.outputs.releaseVersion }}
          restore-keys: |
            ${{ runner.os }}-frontend-build-${{ needs.setup-and-lint.outputs.releaseVersion }}

      - name: Cache Node modules
        id: cache-node-modules
        if: steps.cache-build-results.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: ./node_modules/
          key: ${{ runner.os }}-node-modules-
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install packages
        if: (inputs.useCacheResults == true && steps.cache-build-results.outputs.cache-hit != 'true') || (inputs.useCacheResults != true && steps.cache-node-modules.outputs.cache-hit != 'true')
        run: yarn run yarn:install

      - name: Yarn build
        if: steps.cache-build-results.outputs.cache-hit != 'true'
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: yarn run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.init.outputs.ecr-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ needs.init.outputs.ecr-registry-code }}

      - name: Build image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ fromJson(needs.init.outputs.metadata).ecr.repository }}
        run: |
          docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${{ needs.init.outputs.image-tag }} .

      - name: Push Image
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ fromJson(needs.init.outputs.metadata).ecr.repository }}
        run: |
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${{ needs.init.outputs.image-tag }}

  vulnerability-check-run:
    if: ${{ inputs.vulnerabilityCheck == true }}
    needs: [ init, build ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        image: ${{ fromJson(needs.init.outputs.ecr-images) }}

    steps:
      - name: Vulnerability check
        uses: hawk-ai-aml/github-actions/vulnerability-check@master
        with:
          ecr-region: ${{ needs.init.outputs.ecr-region }}
          ecr-registry-code: ${{ needs.init.outputs.ecr-registry-code }}
          image-name: ${{ matrix.image }}
          image-tag: ${{ needs.init.outputs.image-tag }}
          ecr-url: ${{ needs.init.outputs.ecr-url }}
          aws-access-key-id: ${{ secrets.AWS_ORG_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ORG_ECR_SECRET_ACCESS_KEY }}
          java-offline-mode: ${{ env.LACEWORK_JAVA_OFFLINE_MODE }}
          lacework-account-name: ${{ secrets.LACEWORK_ACCOUNT_NAME }}
          lacework-access-token: ${{ secrets.LACEWORK_ACCESS_TOKEN }}

  update-overlays:
    needs: [ init, setup-and-lint, tests, build ]
    if: ${{ needs.init.outputs.update-kustomize == 'true' }}
    runs-on: [ "self-hosted", "frontend-builder" ]
    strategy:
      max-parallel: 1
      matrix:
        overlay: ${{ fromJson(needs.init.outputs.overlays) }}
        module: ${{ fromJson(needs.init.outputs.kustomize-modules) }}

    steps:
      - name: Update kustomize overlay
        uses: hawk-ai-aml/github-actions/kustomize-overlay@master
        with:
          component-name: ${{ inputs.component }}
          component-tag: ${{ needs.init.outputs.image-tag }}
          kustomize-repo: hawk-ai-aml/kustomize.git
          kustomize-access-token: ${{ secrets.REPO_ACCESS_PAT }}
          ecr-region: ${{ needs.init.outputs.ecr-region }}
          ecr-registry-code: ${{ needs.init.outputs.ecr-registry-code }}
          overlay: ${{ matrix.overlay }}
          module: ${{ matrix.module }}
          metadata: ${{ needs.init.outputs.metadata }}

  clean-up:
    needs: [ init, setup-and-lint, build, tests, update-overlays ]
    runs-on: [ "self-hosted", "frontend-builder" ]

    steps:
      - uses: actions/checkout@v3

      - name: Clean cache
        if: ${{ inputs.deleteCache == true }}
        env:
          USER: ${{ secrets.RECREATE_DEVELOP_GITHUB_USER }}
          TOKEN: ${{ secrets.RECREATE_DEVELOP_GITHUB_TOKEN }}
          REPOSITORY: ${{ inputs.component }}
          CACHE_KEY: ${{ runner.os }}-frontend-build-${{ needs.setup-and-lint.outputs.releaseVersion }}
        run: |
          chmod +x ./lib/delete-cache.sh
          ./lib/delete-cache.sh
        shell: bash
