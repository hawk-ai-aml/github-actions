name: enforce-labels
description: Enforce labels for pull request

inputs:
  repository-access-token:
    description: "Repository access token"
    required: true

runs:
  using: composite
  steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Ensure all tags are fetched

    - name: Check if PR is merged into master. U
      shell: bash -l -ET -eo pipefail {0}
      id: generate-tag
      env:
        GITHUB_TOKEN: ${{ inputs.repository-access-token }}
        PR_NUMBER: ${{ github.event.number }}
      run: |
        get_pr_labels() {
            local repo=$1
            local number=$2
            local token=$3

            response=$(curl -s -H "Authorization: token $token" \
                              -H "Accept: application/vnd.github.v3+json" \
                              "https://api.github.com/repos/$repo/issues/$number/labels")

            echo "$response" | jq -r '.[].name' || echo "Failed to parse JSON with jq. Response was: $response"
        }

        PR_LABELS=$(get_pr_labels "$GITHUB_REPOSITORY" "$PR_NUMBER" "$GITHUB_TOKEN")

        # Get the latest available tag and ensures that the command doesn't fail if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || true)
        if [ -z "$LATEST_TAG" ]; then
          echo "No tags found. Creating tag 0.0.1"
          LATEST_TAG=0.0.0
        else
          echo "latest!: $LATEST_TAG"
        fi

        # Extract major, minor, and patch versions from the latest tag
        MAJOR_VERSION=$(echo "$LATEST_TAG" | awk -F. '{print $1}')
        MINOR_VERSION=$(echo "$LATEST_TAG" | awk -F. '{print $2}')
        PATCH_VERSION=$(echo "$LATEST_TAG" | awk -F. '{print $3}')

        # Initialize variables for the new version
        NEW_MAJOR_VERSION=$MAJOR_VERSION
        NEW_MINOR_VERSION=$MINOR_VERSION
        NEW_PATCH_VERSION=$PATCH_VERSION

        # Check for labels and increment the appropriate version
        if [[ "$PR_LABELS" == *"major-version"* ]]; then
          NEW_MAJOR_VERSION=$((MAJOR_VERSION + 1))
          NEW_MINOR_VERSION=0
          NEW_PATCH_VERSION=0
        elif [[ "$PR_LABELS" == *"minor-version"* ]]; then
          NEW_MINOR_VERSION=$((MINOR_VERSION + 1))
          NEW_PATCH_VERSION=0
        elif [[ "$PR_LABELS" == *"patch-version"* ]]; then
          NEW_PATCH_VERSION=$((PATCH_VERSION + 1))
        else
          echo "No version labels found. No tag created."
          exit 0
        fi

        # Create the new tag and push it
        NEW_TAG="$NEW_MAJOR_VERSION.$NEW_MINOR_VERSION.$NEW_PATCH_VERSION"

        echo "Pull request version type: $PR_LABELS"
        echo "Checking if $NEW_TAG is valid..."

        # Check if the new tag already exists; usually happens when someone manually created tag
        # only try once to increment the patch version
        if git show-ref --tags --quiet --verify "refs/tags/$NEW_TAG"; then
          echo "❌ Error: Tag $NEW_TAG already exists. Creating new tag with incremented patch version."

          NEW_PATCH_VERSION=$((PATCH_VERSION + 1))
          NEW_TAG="$NEW_MAJOR_VERSION.$NEW_MINOR_VERSION.$NEW_PATCH_VERSION"
        else
          echo "✅ Tag $NEW_TAG is valid. Proceeding to create the tag."
        fi

        # Workflow outputs
        cat <<EOF | tee -a ${GITHUB_STEP_SUMMARY} | tee -a ${GITHUB_OUTPUT}
        new_tag=$NEW_TAG
        latest_tag=$LATEST_TAG
        EOF

    - name: Create tag
      id: create-tag
      uses: actions/github-script@v5
      env:
        NEW_TAG: '${{ steps.generate-tag.outputs.new_tag }}'
      with:
        github-token: ${{ inputs.repository-access-token }}
        script: |

          const repo = process.env.GITHUB_REPOSITORY;
          const newTag = `${ process.env.NEW_TAG || ""}`;

          console.log(`Creating tag ${newTag} in repository ${repo}`);

          github.rest.git.createRef({
            owner: repo.split('/')[0],
            repo: repo.split('/')[1],
            ref: `refs/tags/${newTag}`,
            sha: context.sha
          })

    # the command `git describe --tags --abbrev=0 2>/dev/null || true` cannot handle multiple tags for the same commit
    # for example, if the commit has tags v1.0.0 and v1.0.1, the command will return v1.0.0 and the create-tag step will fail
    - name: Check for multiple tags
      shell: bash -l -ET -eo pipefail {0}
      if: steps.create-tag.outcome == 'failure'
      env:
        LATEST_TAG: ${{ steps.generate-tag.outputs.latest_tag }}
      run: |
        # Fetch tags associated with the commit pointed to by $LATEST_TAG
        TAG_COUNT=$(git --no-pager tag --points-at "$LATEST_TAG" | wc -l | tr -d ' ')

        if [[ "$TAG_COUNT" -gt 1 ]]; then
          echo "❌ Error: Multiple tags ($TAG_COUNT) found pointing at commit $LATEST_TAG. Please delete invalid tags."
          git --no-pager tag --points-at "$LATEST_TAG"
          exit 1
        elif [[ "$TAG_COUNT" -eq 0 ]]; then
          echo "⚠️ Warning: No tags detected pointing at commit $LATEST_TAG."
          exit 1
        else
          TAG_NAME=$(git --no-pager tag --points-at "$LATEST_TAG")
          echo "✅ Exactly one tag ($TAG_NAME) detected. The failure might not be related to duplicated tags."
          exit 0
        fi
