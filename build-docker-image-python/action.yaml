name: build-docker-image
description: Build docker image for Python

inputs:
  module:
    description: Python module
    required: true

  multiple-modules:
    description: Flag indicating that the Python project has multiple modules
    required: true

  image-tag:
    description: Tag name
    required: true

  custom-image-tag:
    description: Custom tag name
    required: true

  kustomize-overlays:
    description: The indicated overlays (dev, test, qa, prod)
    required: true

  ecr-repository-prefix:
    description: ECR repository prefix
    required: false

  ecr-registry:
    description: ECR registry
    required: true

  ecr-repository:
    description: ECR repository
    required: false

  hawk-platform-repository:
    description: The name of the ECR repository where all tagged images will be stored
    required: true

  aws-org-ecr-access-key-id:
    description: AWS ORG ECR access key id
    required: true

  aws-org-ecr-secret-access-key:
    description: AWS ORG ECR secret access key
    required: true

  ecr-region:
    description: ECR region
    required: true

  ecr-registry-code:
    description: ECR registry code
    required: true

  pushGHCR:
    description: Flag indicating that the image should be pushed to GHCR
    required: false

  ghcr-pat:
    description: PAT to push and pull from hawk github container registry
    required: false

  py-utils-pat:
    description: Python utils pat
    required: true

  disabled-cache:
    description: Disable docker build cache
    required: false

runs:
  using: composite
  steps:
    - name: Download Action Script
      shell: bash -l -ET -eo pipefail {0}
      run: |
        curl -o action.sh \
        -H "Authorization: token ${{ inputs.py-utils-pat}}" \
        -L "https://raw.githubusercontent.com/hawk-ai-aml/github-actions/master/build-docker-image-python/action.sh"

        chmod +x action.sh

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-org-ecr-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-org-ecr-secret-access-key }}
        aws-region: ${{ inputs.ecr-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registries: ${{ inputs.ecr-registry-code }}

    - name: Check if docker image tag exists in ECR
      id: check-tag
      uses: hawk-ai-aml/github-actions/check-docker-tag-exists-v2@master
      with:
        ecr-repository: ${{ inputs.ecr-repository }}
        image-tag: ${{ inputs.image-tag }}

    - name: Login to GitHub Container Registry
      if: ${{ inputs.pushGHCR == 'true' }}
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.ghcr-pat }}

    - name: Build docker image for multiple modules
      id: build-image-modules
      if: ${{ steps.check-tag.outputs.tag_already_exists != 'true' && inputs.multiple-modules == 'true' }}
      shell: bash -l -ET -eo pipefail {0}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ecr-repository }}
        ECR_REPOSITORY_PREFIX: ${{ inputs.ecr-repository-prefix }}
        KUSTOMIZE_OVERLAYS: ${{ inputs.kustomize-overlays }}
        HAWK_PLATFORM_REPOSITORY: ${{ inputs.hawk-platform-repository }}
        MODULE: ${{ inputs.module }}
        IMAGE_TAG: ${{ inputs.image-tag }}
        CUSTOM_IMAGE_TAG: ${{ inputs.custom-image-tag }}
        PY_UTILS_PAT: ${{ inputs.py-utils-pat }}
        DISABLED_CACHE: ${{ inputs.disabled-cache }}
      run: |
        source ./action.sh
        echo -e "${GREEN}✅ Building images for modules...${NC}"

        REPOSITORY_FOLDER=$(echo "${MODULE}" | sed 's/_/-/g')
        REPOSITORY_FULL_NAME="${ECR_REGISTRY}/${ECR_REPOSITORY_PREFIX}${REPOSITORY_FOLDER}"
        
        BUILD_ARGS="--build-arg SERVICE=${MODULE} --build-arg PY_UTILS_PAT=${PY_UTILS_PAT}"
        if [[ -n "$DISABLED_CACHE" == "true" ]]; then
          BUILD_ARGS="--no-cache ${BUILD_ARGS}"
        fi
        build_and_push "${REPOSITORY_FULL_NAME}" "${BUILD_ARGS}"

        if [[ -n "$HAWK_PLATFORM_REPOSITORY" && "$KUSTOMIZE_OVERLAYS" == "prod" ]]; then
            tag_and_push "${REPOSITORY_FULL_NAME}" "${ECR_REGISTRY}/${HAWK_PLATFORM_REPOSITORY}" "${CUSTOM_IMAGE_TAG}"
        fi

        echo -e "${GREEN}✅ All operations completed successfully!${NC}"

    - name: Build docker image for single build
      id: build-image-single
      if: ${{ steps.check-tag.outputs.tag_already_exists != 'true' && inputs.multiple-modules == 'false' }}
      shell: bash -l -ET -eo pipefail {0}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ecr-repository }}
        KUSTOMIZE_OVERLAYS: ${{ inputs.kustomize-overlays }}
        HAWK_PLATFORM_REPOSITORY: ${{ inputs.hawk-platform-repository }}
        IMAGE_TAG: ${{ inputs.image-tag }}
        CUSTOM_IMAGE_TAG: ${{ inputs.custom-image-tag }}
        PY_UTILS_PAT: ${{ inputs.py-utils-pat}}
        GHCR_REPOSITORY_ENABLED: ${{ inputs.pushGHCR }}
        GHCR_REGISTRY: ghcr.io/hawk-ai-aml
        DISABLED_CACHE: ${{ inputs.disabled-cache }}
      run: |
        source ./action.sh
        echo -e "${GREEN}✅ Building images for single build...${NC}"

        if [ -n "$ECR_REPOSITORY" ]; then
          IMAGE_NAME="${ECR_REGISTRY}/${ECR_REPOSITORY}"
        
          BUILD_ARGS="--build-arg SERVICE=${MODULE} --build-arg PY_UTILS_PAT=${PY_UTILS_PAT}"
          if [[ -n "$DISABLED_CACHE" == "true" ]]; then
            BUILD_ARGS="--no-cache ${BUILD_ARGS}"
          fi
          build_and_push "${IMAGE_NAME}" "${BUILD_ARGS}"

          if [[ "$GHCR_REPOSITORY_ENABLED" == "true" ]]; then
              tag_and_push "${IMAGE_NAME}" "${GHCR_REGISTRY}/${ECR_REPOSITORY}" "${IMAGE_TAG}"
          fi

          if [[ -n "$HAWK_PLATFORM_REPOSITORY" && "$KUSTOMIZE_OVERLAYS" == "prod" ]]; then
              tag_and_push "${IMAGE_NAME}" "${ECR_REGISTRY}/${HAWK_PLATFORM_REPOSITORY}" "${CUSTOM_IMAGE_TAG}"
          fi
        else
            echo -e "${RED}❌ Missing the ECR repository. Aborting!${NC}"
            exit 1
        fi

        echo -e "${GREEN}✅ All operations completed successfully!${NC}"
