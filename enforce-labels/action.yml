name: enforce-labels
description: Enforce labels for pull request and perform risk assessment

inputs:
  repository-ref:
    description: "Repository ref"
    required: false
    default: master

  repository-access-token:
    description: "Repository access token"
    required: true

  required-labels-any-opt1:
    description: "List of required labels separated by ;"
    default: "impact 1 * likelyhood 1 = risk 1;impact 1 * likelyhood 2 = risk 2;impact 2 * likelyhood 1 = risk 2;impact 1 * likelyhood 3 = risk 3;impact 3 * likelyhood 1 = risk 3;impact 2 * likelyhood 2 = risk 4;impact 2 * likelyhood 3 = risk 6;impact 3 * likelyhood 2 = risk 6;impact 3 * likelyhood 3 = risk 9"
    required: true

  required-labels-any-opt2:
    description: "List of required labels separated by ;"
    default: "patch-version;minor-version;major-version"
    required: false

  banned-labels:
    description: "List of required labels separated by ;"
    default: "impact 2 * likelyhood 2 = risk 4;impact 2 * likelyhood 3 = risk 6;impact 3 * likelyhood 2 = risk 6;impact 3 * likelyhood 3 = risk 9"
    required: false

  sra-enabled:
    description: 'Enable or disable the entire risk assessment workflow'
    required: false
    default: 'true'

  enforce-mode:
    description: 'Whether to enforce risk assessment results'
    required: false
    default: 'false'

  github-actions-ref:
    description: 'Branch/ref to use for hawk-ai-aml/github-actions repository'
    required: false
    default: 'master'

outputs:
  risk-score:
    description: 'Calculated risk score'
    value: ${{ steps.risk-assessment.outputs.risk-score }}
  risk-tier:
    description: 'Risk tier'
    value: ${{ steps.risk-assessment.outputs.risk-tier }}
  status:
    description: 'Assessment status'
    value: ${{ steps.risk-assessment.outputs.status }}

runs:
  using: composite
  steps:

    - name: Check required labels
      shell: bash -l -ET -eo pipefail {0}
      env:
        WORKFLOW_TYPE: ${{ github.workflow }}
        REQUIRED_LABELS_ANY_OPT1: ${{ inputs.required-labels-any-opt1 }}
        REQUIRED_LABELS_ANY_OPT2: ${{ inputs.required-labels-any-opt2 }}
        BANNED_LABELS: ${{ inputs.banned-labels }}
        GITHUB_TOKEN: ${{ inputs.repository-access-token }}
        GITHUB_REF: ${{ inputs.repository-ref }}
      run: |
        get_pr_number() {
            local ref=$1
            echo $ref | awk 'BEGIN { FS = "/" } ; { print $3 }'
        }

        get_pr_labels() {
            local repo=$1
            local number=$2
            local token=$3
            curl -s -H "Authorization: token $token" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/$repo/issues/$number/labels" | jq -r '.[].name'
        }

        check_banned_labels() {
            local labels=$1
            local banned=$2
            IFS=$'\n'
            for label in $labels; do
                if [[ $banned == *"$label"* ]]; then
                    echo "Label $label found and identified as risk. Please consult your tech lead. PR is blocked!"
                    exit 1
                fi
            done
        }

        check_required_labels() {
            local labels=$1
            local required=$2

            IFS=';' read -ra required_array <<< "$required"

            local count=0
            local found_label=""
            for required_label in "${required_array[@]}"; do
                IFS=$'\n'
                for label in $labels; do
                    if [[ "$label" == "$required_label" ]]; then
                        count=$((count + 1))
                        found_label=$required_label
                    fi
                done
            done

            if [[ $count -eq 1 ]]; then
                echo "Required label $found_label found!" >&1
                return 0
            else
                echo "Select exactly one label [$required]" >&1
                return 1
            fi
        }

        pr_number=$(get_pr_number "$GITHUB_REF")
        pr_labels=$(get_pr_labels "$GITHUB_REPOSITORY" "$pr_number" "$GITHUB_TOKEN")

        check_banned_labels "$pr_labels" "$BANNED_LABELS"

        failed=0
        label_sets=("$REQUIRED_LABELS_ANY_OPT1" "$REQUIRED_LABELS_ANY_OPT2")

        for required_labels in "${label_sets[@]}"; do
            check_required_labels "$pr_labels" "$required_labels"

            if [[ $? -eq 1 ]]; then
                failed=$((failed + 1))
            fi
        done

        if [[ $failed -gt 0 ]]; then
            echo "One or more label sets failed the check."
            exit 1
        else
            echo "All label sets passed the check."
        fi

    - name: Checkout calling repository
      if: ${{ inputs.sra-enabled == 'true' && !github.event.pull_request.draft }}
      continue-on-error: true
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Checkout github actions for risk assessment
      if: ${{ inputs.sra-enabled == 'true' && !github.event.pull_request.draft }}
      continue-on-error: true
      uses: actions/checkout@v4
      with:
        repository: hawk-ai-aml/github-actions
        path: .github-actions
        ref: ${{ inputs.github-actions-ref }}
        token: ${{ inputs.repository-access-token }}

    - name: Send workflow start metric
      id: metrics-start
      if: ${{ inputs.sra-enabled == 'true' && !github.event.pull_request.draft }}
      continue-on-error: true
      uses: ./.github-actions/workflow-metrics
      with:
        action: start
        grouping-keys: |
          job: github_risk_assessment
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
        labels: |
          github_actions_ref: ${{ inputs.github-actions-ref }}
          sra_enabled: ${{ inputs.sra-enabled }}
          enforce_mode: ${{ inputs.enforce-mode }}

    - name: Load Risk Questions Config
      id: load-config
      if: ${{ inputs.sra-enabled == 'true' && !github.event.pull_request.draft }}
      continue-on-error: true
      shell: bash
      run: |
        CONFIG_PATH=".github-actions/risk-assessment/config/risk-questions.json"

        # Read and encode config as base64
        CONFIG_B64=$(cat "$CONFIG_PATH" | base64 -w 0)
        echo "config-b64=$CONFIG_B64" >> $GITHUB_OUTPUT

    - name: Run Risk Assessment
      id: risk-assessment
      if: ${{ inputs.sra-enabled == 'true' && !github.event.pull_request.draft }}
      continue-on-error: true
      uses: ./.github-actions/risk-assessment
      env:
        SRA_ENFORCE_MODE: ${{ inputs.enforce-mode }}
      with:
        github-token: ${{ inputs.repository-access-token }}
        config: ${{ steps.load-config.outputs.config-b64 }}

    - name: Send workflow completion metric
      id: metrics-complete
      if: ${{ always() && inputs.sra-enabled == 'true' && !github.event.pull_request.draft }}
      continue-on-error: true
      uses: ./.github-actions/workflow-metrics
      with:
        action: complete
        grouping-keys: |
          job: github_risk_assessment
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          fallback: ${{ steps.risk-assessment.outputs.fallback }}
        labels: |
          github_actions_ref: ${{ inputs.github-actions-ref }}
          sra_enabled: ${{ inputs.sra-enabled }}
          enforce_mode: ${{ inputs.enforce-mode }}
          tier: ${{ steps.risk-assessment.outputs.risk-tier || 'unknown' }}
          status: ${{ job.status || 'unknown' }}
        additional-metrics: |
          github_risk_assessment_score: ${{ steps.risk-assessment.outputs.risk-score || '-1' }}
        start-time: ${{ steps.metrics-start.outputs.start-time }}
