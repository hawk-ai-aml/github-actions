name: repository-detect-changes
description: Detect changes for a repository

inputs:
  repository:
    description: "Name of repository"
    required: true

  repository-ref:
    description: "Repository ref"
    required: false
    default: master

  repository-user:
    description: "User can access the repository"
    required: true

  repository-access-token:
    description: "Repository access token"
    required: true

  modules-string:
    description: "Module nane in string"
    required: true

outputs:
  updated-modules:
    description: 'The list of modules has the code changes'
    value: ${{ steps.changes.outputs.updatedModules }}

  updated-modules-string:
    description: 'The list of modules has the code changes in string'
    value: ${{ steps.changes.outputs.updatedModulesString }}

runs:
  using: composite
  steps:
    - name: Checkout Kustomize
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.repository-ref }}
        token: ${{ inputs.repository-access-token }}

    - name: Detect changes
      id: changes
      shell: bash -l -ET -eo pipefail {0}
      env:
        USER: ${{ inputs.repository-user }}
        TOKEN: ${{ inputs.repository-access-token }}
        REPOSITORY: ${{ inputs.repository }}
        REPOSITORY_MODULES: ${{ inputs.modules-string }}
        WORKFLOW_TYPE: ${{ github.workflow }}
      run: |
        echo "WORKFLOW_TYPE: $WORKFLOW_TYPE"
        SPACE=" "

        case $WORKFLOW_TYPE in
          "manual")
            CURRENT_BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
            echo "Branch: ${CURRENT_BRANCH}"

            COMMIT_IDS=$(curl -s https://api.github.com/repos/$REPOSITORY/commits\?sha\=${CURRENT_BRANCH} -u "$USER:$TOKEN" | jq -r '[.[] | if .commit.verification.signature == null then .sha else 1 end] | join(" ")')
            echo "IDS: ${COMMIT_IDS}"
        
            for id in ${COMMIT_IDS}; do
              if [[ $id == 1 ]]; then
                break
              fi
      
              FILES=$(curl -s https://api.github.com/repos/$REPOSITORY/commits/${id} -u "$USER:$TOKEN" | jq -r '[.files | .[] | select(.status == "modified") | .filename] | join(" ")')
      
              for module in $REPOSITORY_MODULES; do
                for file in $FILES; do
                  IFS='/' read -ra ADDR <<< "$file"
                  if [[ ${ADDR[0]} == *"$module"* && $MODULES != *"$module"* ]];  then
                    MODULES="${MODULES}\"$module\","
                    MODULE_LIST_STRING=${MODULE_LIST_STRING}${module}${SPACE}
                    break
                  fi
                done
              done
            done
          ;;
          "pr")
            PULL_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
            echo "PR: ${PULL_NUMBER}";

            FILES=$(curl -s https://api.github.com/repos/$REPOSITORY/pulls/${PULL_NUMBER}/files -u "$USER:$TOKEN" | jq -r '[.[] | .filename] | join(" ")')
          
            for module in $REPOSITORY_MODULES; do
              for file in $FILES; do
                IFS='/' read -ra ADDR <<< "$file"
                if [[ ${ADDR[0]} == *"$module"* && $MODULES != *"$module"* ]];  then
                  MODULES="${MODULES}\"$module\","
                  MODULE_LIST_STRING=${MODULE_LIST_STRING}${module}${SPACE}
                  break
                fi
              done
            done
          ;;
          *)
            for module in $REPOSITORY_MODULES; do
              MODULES="${MODULES}\"$module\","
              MODULE_LIST_STRING=${MODULE_LIST_STRING}${module}${SPACE}
            done
          ;;
        esac

        echo "MODULES=${MODULES}"
        echo "FILES=${FILES}"
        
        CORE_CHANGES=false

        for file in $FILES; do
          if [[ $file == *"core"* ]];  then
            CORE_CHANGES=true
            break
          fi
        done
        
        if [[ ((${MODULES} == "" || ${MODULES} == "\"core\",") && $(echo ${#FILES}) != 0) || ((${MODULES} == "" || ${MODULES} == "\"core\",") && $CORE_CHANGES == true) ]];  then
          for module in $REPOSITORY_MODULES; do
            if [[ $MODULES != *"$module"* ]];  then
              MODULES="${MODULES}\"$module\","
              MODULE_LIST_STRING=${MODULE_LIST_STRING}${module}${SPACE}
            fi
          done
        fi
        
        LENGTH_OF_MODULE_LIST=$(echo ${#MODULES})
        MODULES=${MODULES:0:${LENGTH_OF_MODULE_LIST}-1}
        MODULES="[${MODULES}]"

        # Workflow outputs
        cat <<EOF | tee -a ${GITHUB_STEP_SUMMARY} | tee -a ${GITHUB_OUTPUT}
        updatedModules=${MODULES}
        updatedModulesString=${MODULE_LIST_STRING}
        EOF

# End of file
