name: vulnerability-check

inputs:
  ecr-region:
    description: "ECR region"
    required: true

  ecr-registry-code:
    description: "ECR registry code"
    required: true

  image-name:
    description: "Name of image"
    required: true

  image-tag:
    description: "Tag of image"
    required: true

  ecr-url:
    description: "URL to ECR"
    required: true

  aws-access-key-id:
    description: "AWS access key id"
    required: true

  aws-secret-access-key:
    description: "AWS secret access key"
    required: true

  java-offline-mode:
    description: "Java offline mode"
    required: true

  lacework-account-name:
    description: "Lacework account name"
    required: true

  lacework-access-token:
    description: "Lacework access token"
    required: true

runs:
  using: composite
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.ecr-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registries: ${{ inputs.ecr-registry-code }}

    - name: Retrieve AWS ECR login password for Lacework
      shell: bash -l -ET -eo pipefail {0}
      id: ecr-password
      env:
        ECR_REGION: ${{ inputs.ecr-region }}
      run: |
        echo "password=$(aws ecr get-login-password --region ${ECR_REGION})" >> $GITHUB_OUTPUT

    - uses: lacework/lw-scanner-action@v1.3.2
      name: Scan container image for vulnerabilities using Lacework
      env:
        JAVA_OFFLINE_MODE: ${{ inputs.java-offline-mode }}
      with:
        LW_ACCOUNT_NAME: ${{ inputs.lacework-account-name }}
        LW_ACCESS_TOKEN: ${{ inputs.lacework-access-token }}
        IMAGE_NAME: ${{ inputs.image-name }}
        IMAGE_TAG: ${{ inputs.image-tag }}
        SAVE_RESULTS_IN_LACEWORK: true
        ADDITIONAL_PARAMETERS: --docker-username AWS --docker-server ${{ inputs.ecr-url }} --docker-password ${{ steps.ecr-password.outputs.password }}

# End of file
