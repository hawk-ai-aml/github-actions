name: workflow-init
description: Workflow Init Action

inputs:
  skip-tests:
    description: "Hint to skip tests"
    required: false
    default: "false"
  update-kustomize:
    description: "Hint to update kustomize"
    required: false
    default: "false"
  overlays:
    description: "Overlays to update"
    required: false
    default: dev
  repository-name:
    description: "Repository name"
    required: true
  repository-ref:
    description: "Repository ref"
    required: false
    default: master
  repository-access-token:
    description: "Access token to repository"
    required: true
  use-sonarcloud:
    description: "Hint to use SonarCloud"
    required: false
    default: "false"
  should-authorize-poetry:
    description: "Hint to authorize poetry"
    required: false
    default: "true"
  authorized-repos:
    description: "List of authorized repositories"
    required: false
    default: ""

outputs:
  overlays:
    description: "repository overlays"
    value: ${{ steps.vars.outputs.overlays }}

  update-kustomize:
    description: "Hint to update kustomize"
    value: ${{ steps.vars.outputs.update-kustomize }}

  skip-tests:
    description: "Hint to skip tests"
    value: ${{ steps.vars.outputs.skip-tests }}

  image-tag:
    description: "Tag number for docker image"
    value: ${{ steps.vars.outputs.image-tag }}

  ecr-url:
    description: "The URL to Hawks ECR"
    value: ${{ steps.vars.outputs.ecr-url }}

  kustomize-modules:
    description: "List of module name"
    value: ${{ steps.vars.outputs.kustomize-modules }}

  kustomize-modules-string:
    description: "List of module name in string"
    value: ${{ steps.vars.outputs.kustomize-modules-string }}

  ecr-images:
    description: "List of ecr image name"
    value: ${{ steps.vars.outputs.ecr-images }}

  ecr-repositories:
    description: "List of ecr repository name"
    value: ${{ steps.vars.outputs.ecr-repositories }}

  ecr-registry-code:
    description: "The ERC registry code"
    value: ${{ steps.vars.outputs.ecr-registry-code }}

  ecr-region:
    description: "The ERC region"
    value: ${{ steps.vars.outputs.ecr-region }}

  metadata:
    description: "The metadata of the current repository"
    value: ${{ steps.vars.outputs.metadata }}

  use-sonarcloud:
    description: "Hint to use SonarCloud"
    value: ${{ steps.vars.outputs.use-sonarcloud }}

  should-authorize-poetry:
    description: "Hint to authorize poetry"
    value: ${{ steps.vars.outputs.should-authorize-poetry }}

  authorized-repos:
    description: "List of authorized repositories"
    value: ${{ steps.vars.outputs.authorized-repos }}

runs:
  using: composite
  steps:
    - id: init
      shell: bash -l -ET -eo pipefail {0}
      run: echo "HAWK_WORKFLOW_ID=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> ${GITHUB_ENV}

    - name: Checkout current repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository-name }}
        ref: ${{ inputs.repository-ref }}
        token: ${{ inputs.repository-access-token }}

    - name: Load profile
      id: profile
      shell: bash -l -ET -eo pipefail {0}
      run: |
        METADATA_JSON=$(yj -y < .github/workflows/profile.json)
        echo "metadata=${METADATA_JSON}" >> $GITHUB_OUTPUT

    - id: vars
      shell: bash -l -ET -eo pipefail {0}
      env:
        METADATA: ${{ steps.profile.outputs.metadata }}
      run: |
        cat <<EOF | tee -a ${GITHUB_STEP_SUMMARY}
        \`\`\`
        Workflow: ${HAWK_WORKFLOW_ID}
        Attempt: ${GITHUB_RUN_ATTEMPT}
        Name: ${GITHUB_WORKFLOW}
        Inputs: ${{ toJSON(inputs) }}
        \`\`\`
        \`\`\`
        EOF

        UPDATE_KUSTOMIZE=${{ inputs.update-kustomize }}
        UPDATE_KUSTOMIZE=${UPDATE_KUSTOMIZE:-false}

        SHOUD_AUTHORIZE_POETRY=${{ inputs.should-authorize-poetry }}

        KUSTOMIZE_OVERLAYS=${{ inputs.overlays }}
        KUSTOMIZE_OVERLAYS=${KUSTOMIZE_OVERLAYS:-dev}

        SKIP_TESTS=${{ inputs.skip-tests }}
        SKIP_TESTS=${SKIP_TESTS:-false}

        # Build image tag
        BUILD_BRANCH=$(echo ${GITHUB_REF_NAME} | sed 's,\/,-,g; s,\#,,g')
        GIT_SHA_SHORT=${GITHUB_SHA:0:7}
        case $GITHUB_WORKFLOW in
          "tag")
            IMAGE_TAG=${BUILD_BRANCH}
          ;;
          "pr")
            BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | sed 's,\/,-,g; s,\#,,g')
            IMAGE_TAG="pr-${BRANCH_NAME}-${GIT_SHA_SHORT}"
          ;;
          *)
            IMAGE_TAG=${BUILD_BRANCH}-${GIT_SHA_SHORT}
          ;;
        esac

        ECR_REGION=$(echo ${METADATA} | jq -r '.ecr.region')
        ECR_REGISTRY_CODE=$(echo ${METADATA} | jq -r '.ecr."registry-code"')
        ECR_URL=${ECR_REGISTRY_CODE}.dkr.ecr.${ECR_REGION}.amazonaws.com

        # Build kustomize modules and ECR images
        SPACE=" "
        for module in $(echo ${METADATA} | jq -cr '.modules | keys | join(" ")'); do
          MODULE_LIST="${MODULE_LIST}\"${module}\","
          MODULE_LIST_STRING=${MODULE_LIST_STRING}${module}${SPACE}

          MODULE_ECR=$(echo ${METADATA} | jq -cr --arg MODULE ${module} '.modules[$MODULE].ecr')
          if [[ ${MODULE_ECR} != "null" ]]; then
            MODULE_REPOSITORY=$(echo ${METADATA} | jq -cr --arg MODULE ${module} '.modules[$MODULE].ecr.repository')
            IMAGE_LIST="${IMAGE_LIST}\"${ECR_URL}/${MODULE_REPOSITORY}\","
            ECR_REPOSITORY_LIST="${ECR_REPOSITORY_LIST} ${MODULE_REPOSITORY}"
          fi
        done

        LENGTH_OF_MODULE_LIST=$(echo ${#MODULE_LIST})
        MODULE_LIST=${MODULE_LIST:0:${LENGTH_OF_MODULE_LIST}-1}
        KUSTOMIZE_MODULES="[${MODULE_LIST}]"

        LENGTH_OF_IMAGE_LIST=$(echo ${#IMAGE_LIST})
        IMAGE_LIST=${IMAGE_LIST:0:${LENGTH_OF_IMAGE_LIST}-1}
        IMAGE_LIST="[${IMAGE_LIST}]"
        ECR_IMAGES="${IMAGE_LIST}"

        if [[ ${KUSTOMIZE_OVERLAYS} != "null" ]]; then
          OVERLAYS_JSON=$(echo ${METADATA} | jq -cr --arg OVERLAYS ${KUSTOMIZE_OVERLAYS} '.overlays[$OVERLAYS]')
        fi

        OVERLAYS_STRING=$(echo ${OVERLAYS_JSON} | jq -r 'join(" ")')

        USE_SONARCLOUD=${{ inputs.use-sonarcloud }}

        INPUT_AUTHORIZED_REPOS="${{ inputs.authorized-repos }}"
        if [ -n "$INPUT_AUTHORIZED_REPOS" ]; then
            AUTHORIZED_REPOS="$INPUT_AUTHORIZED_REPOS"
          else
            AUTHORIZED_REPOS="$(echo "$METADATA" | jq -r '.authorized-repos | join(",")')"
          fi
        AUTHORIZED_REPOS=${{ inputs.authorized-repos }} or $(echo ${METADATA} | jq -r '.authorized-repos | join(",")')

        # Workflow outputs
        cat <<EOF | tee -a ${GITHUB_STEP_SUMMARY} | tee -a ${GITHUB_OUTPUT}
        overlays=${OVERLAYS_STRING}
        update-kustomize=${UPDATE_KUSTOMIZE}
        skip-tests=${SKIP_TESTS}
        image-tag=${IMAGE_TAG}
        ecr-url=${ECR_URL}
        kustomize-modules=${KUSTOMIZE_MODULES}
        kustomize-modules-string=${MODULE_LIST_STRING}
        ecr-images=${ECR_IMAGES}
        ecr-repositories=${ECR_REPOSITORY_LIST}
        ecr-registry-code=${ECR_REGISTRY_CODE}
        ecr-region=${ECR_REGION}
        metadata=${METADATA}
        use-sonarcloud=${USE_SONARCLOUD}
        should-authorize-poetry=${SHOUD_AUTHORIZE_POETRY}
        authorized-repos=${AUTHORIZED_REPOS}
        EOF

        cat <<EOF | tee -a ${GITHUB_STEP_SUMMARY}
        \`\`\`
        EOF

# End of file
